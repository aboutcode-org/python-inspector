[build-system]
requires = ["setuptools >= 50", "wheel", "setuptools_scm[toml] >= 6"]
build-backend = "setuptools.build_meta"

[project]
name = "python-inspector"
version = "0.14.0"
description = "python-inspector is is a collection of utilities to collect PyPI package metadata and resolve packages dependencies."
authors = [
    { name="nexB. Inc. and others", email="info@aboutcode.org"},
    { name="Helio Chissini de Castro", email="helio.chissini.de.castro@cariad.technology" },
]
maintainers = [
    { name="nexB. Inc. and others", email="info@aboutcode.org"},
    { name ="Helio Chissini de Castro", email="helio.chissini.de.castro@cariad.technology" },
]
readme = "README.md"
license = "Apache-2.0"
license-files = [
    "apache-2.0.LICENSE",
    "NOTICE",
    "AUTHORS.rst",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst",
]
requires-python = ">= 3.9"
keywords = [
    "dependencies",
    "dependency resolution",
    "dependency",
    "open source",
    "package",
    "pip",
    "pypi",
    "python",
    "requirements",
    "resolvelib",
    "resolver",
    "SBOM",
    "sca",
    "scan",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click>=8.1.8",
    "colorama>=0.4.6",
    "commoncode>=32.2.1",
    "dparse2>=0.7.0",
    "importlib-metadata>=8.6.1",
    "license-expression>=30.4.1",
    "mock>=5.2.0",
    "packageurl-python>=0.16.0",
    "packaging>=24.2",
    "pip-requirements-parser>=32.0.1",
    "pkginfo2>=30.0.0",
    "resolvelib>=1.1.0",
    "setuptools>=77.0.1",
    "toml>=0.10.2",
    "typecode>=30.0.2",
]

[project.urls]
"Homepage" = "https://github.com/aboutcode-org/python-inspector"

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pycodestyle>=2.12.1",
    "ruff>=0.11.0",
    "types-requests>=2.32.0.20250306",
    "types-toml>=0.10.8.20240310",
]
docs = [
    "doc8>=1.1.2",
    "hatch>=1.14.0",
    "sphinx>=7.4.7",
    "sphinx-reredirects>=0.1.6",
    "sphinx-rtd-theme>=3.0.2",
]
testing = [
    "aboutcode-toolkit>=11.0.0",
    "pip>=25.0.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-rerunfailures>=15.0",
    "pytest-xdist>=3.6.1",
    "twine>=6.1.0",
]

[tool.hatch.envs.default.scripts]
validate-docs = "sh -c 'doc8 --max-line-length 100 --ignore-path docs/build/ docs/'"

[project.scripts]
python-inspector = "python_inspector.resolve_cli:resolve_dependencies"


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "-rfExXw",
]
log_cli = true
log_cli_level = "INFO"
pythonpath = [
    "etc/scripts",
    "tests"
]
testpaths = [
    "tests",
    "etc"
]

[tool.pylint.messages_control]
disable = [
    "abstract-method",
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "chained-comparison",
    "duplicate-code",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "invalid-name",
    "import-error",
    "logging-fstring-interpolation",
    "missing-docstring",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "unexpected-special-method-signature",
    "unspecified-encoding",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "normal"
strict_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = false
no_implicit_reexport = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
fix = false
line-length = 110
include = [
    "src/python_inspector"
]

extend-exclude = ["tests", "etc", "docs", "MANIFEST.in", "README.md", "README.rst"]

# Assume Python 3.9.
target-version = "py39"

[tool.ruff.lint]
extend-select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "UP",  # pyupgrade
    "S",   # bandit
]
ignore = [
    'N802',   # function name should be lowercase
    'SIM105', # Suggest contextlib instead of try/except with pass
    'COM812', # missing-trailing-comma from flake8-commas
    'N818', # error-suffix-on-exception-name
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
flake8-tidy-imports.ban-relative-imports = "all"
#isort.required-imports = ["from __future__ import annotations"]
# Unlike Flake8, default to a complexity level of 10.
mccabe.max-complexity = 10

[tool.pyright]
reportUnboundVariable = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
