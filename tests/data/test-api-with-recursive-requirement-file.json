{
  "files": [
    {
      "type": "file",
      "path": "tests/data/recursive_requirements/r.txt",
      "package_data": [
        {
          "type": "pypi",
          "namespace": null,
          "name": null,
          "version": null,
          "qualifiers": {},
          "subpath": null,
          "primary_language": "Python",
          "description": null,
          "release_date": null,
          "parties": [],
          "keywords": [],
          "homepage_url": null,
          "download_url": null,
          "size": null,
          "sha1": null,
          "md5": null,
          "sha256": null,
          "sha512": null,
          "bug_tracking_url": null,
          "code_view_url": null,
          "vcs_url": null,
          "copyright": null,
          "license_expression": null,
          "declared_license": null,
          "notice_text": null,
          "source_packages": [],
          "file_references": [],
          "extra_data": {
            "requirements": [
              "com.txt"
            ]
          },
          "dependencies": [
            {
              "purl": "pkg:pypi/pyyaml@6.0",
              "extracted_requirement": "PyYAML==6.0",
              "scope": "install",
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": true,
              "resolved_package": {},
              "extra_data": {
                "is_editable": false,
                "link": null,
                "hash_options": [],
                "is_constraint": false,
                "is_archive": null,
                "is_wheel": false,
                "is_url": null,
                "is_vcs_url": null,
                "is_name_at_url": false,
                "is_local_path": null
              }
            },
            {
              "purl": "pkg:pypi/retrying@1.3.3",
              "extracted_requirement": "retrying==1.3.3",
              "scope": "install",
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": true,
              "resolved_package": {},
              "extra_data": {
                "is_editable": false,
                "link": null,
                "hash_options": [],
                "is_constraint": false,
                "is_archive": null,
                "is_wheel": false,
                "is_url": null,
                "is_vcs_url": null,
                "is_name_at_url": false,
                "is_local_path": null
              }
            },
            {
              "purl": "pkg:pypi/shapely@1.7.1",
              "extracted_requirement": "shapely==1.7.1",
              "scope": "install",
              "is_runtime": true,
              "is_optional": false,
              "is_resolved": true,
              "resolved_package": {},
              "extra_data": {
                "is_editable": false,
                "link": null,
                "hash_options": [],
                "is_constraint": false,
                "is_archive": null,
                "is_wheel": false,
                "is_url": null,
                "is_vcs_url": null,
                "is_name_at_url": false,
                "is_local_path": null
              }
            }
          ],
          "repository_homepage_url": null,
          "repository_download_url": null,
          "api_data_url": null,
          "datasource_id": "pip_requirements",
          "purl": null
        }
      ]
    }
  ],
  "packages": [
    {
      "type": "pypi",
      "namespace": null,
      "name": "pyyaml",
      "version": "6.0",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "YAML parser and emitter for Python\nYAML is a data serialization format designed for human readability\nand interaction with scripting languages.  PyYAML is a YAML parser\nand emitter for Python.\n\nPyYAML features a complete YAML 1.1 parser, Unicode support, pickle\nsupport, capable extension API, and sensible error messages.  PyYAML\nsupports standard YAML tags and provides Python-specific tags that\nallow to represent an arbitrary Python object.\n\nPyYAML is applicable for a broad range of tasks from complex\nconfiguration files to object serialization and persistence.",
      "release_date": "2021-10-13T19:40:30",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Kirill Simonov",
          "email": "xi@resolvent.net",
          "url": null
        }
      ],
      "keywords": [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: Cython",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: Text Processing :: Markup"
      ],
      "homepage_url": "https://pyyaml.org/",
      "download_url": "https://files.pythonhosted.org/packages/d7/42/7ad4b6d67a16229496d4f6e74201bdbebcf4bc1e87d5a70c9297d4961bd2/PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "size": 701221,
      "sha1": null,
      "md5": "17f172d6cfad4f9834ea0af4d46b0b58",
      "sha256": "277a0ef2981ca40581a47093e9e2d13b3f1fbbeffae064c1d21bfceba2030287",
      "sha512": null,
      "bug_tracking_url": "https://github.com/yaml/pyyaml/issues",
      "code_view_url": "https://github.com/yaml/pyyaml",
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "MIT",
        "classifiers": [
          "License :: OSI Approved :: MIT License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/pyyaml/6.0/json",
      "datasource_id": null,
      "purl": "pkg:pypi/pyyaml@6.0"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "pyyaml",
      "version": "6.0",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "YAML parser and emitter for Python\nYAML is a data serialization format designed for human readability\nand interaction with scripting languages.  PyYAML is a YAML parser\nand emitter for Python.\n\nPyYAML features a complete YAML 1.1 parser, Unicode support, pickle\nsupport, capable extension API, and sensible error messages.  PyYAML\nsupports standard YAML tags and provides Python-specific tags that\nallow to represent an arbitrary Python object.\n\nPyYAML is applicable for a broad range of tasks from complex\nconfiguration files to object serialization and persistence.",
      "release_date": "2021-10-13T19:40:57",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Kirill Simonov",
          "email": "xi@resolvent.net",
          "url": null
        }
      ],
      "keywords": [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: Cython",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: Text Processing :: Markup"
      ],
      "homepage_url": "https://pyyaml.org/",
      "download_url": "https://files.pythonhosted.org/packages/36/2b/61d51a2c4f25ef062ae3f74576b01638bebad5e045f747ff12643df63844/PyYAML-6.0.tar.gz",
      "size": 124996,
      "sha1": null,
      "md5": "1d19c798f25e58e3e582f0f8c977dbb8",
      "sha256": "68fb519c14306fec9720a2a5b45bc9f0c8d1b9c72adf45c37baedfcd949c35a2",
      "sha512": null,
      "bug_tracking_url": "https://github.com/yaml/pyyaml/issues",
      "code_view_url": "https://github.com/yaml/pyyaml",
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "MIT",
        "classifiers": [
          "License :: OSI Approved :: MIT License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/pyyaml/6.0/json",
      "datasource_id": null,
      "purl": "pkg:pypi/pyyaml@6.0"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "retrying",
      "version": "1.3.3",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "Retrying\n=========================\n.. image:: https://travis-ci.org/rholder/retrying.png?branch=master\n    :target: https://travis-ci.org/rholder/retrying\n\n.. image:: https://badge.fury.io/py/retrying.png\n    :target: https://pypi.python.org/pypi/retrying\n\n.. image:: https://pypip.in/d/retrying/badge.png\n    :target: https://pypi.python.org/pypi/retrying\n\nRetrying is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.\n\n\nThe simplest use case is retrying a flaky function whenever an Exception occurs\nuntil a value is returned.\n\n.. code-block:: python\n\n    import random\n    from retrying import retry\n\n    @retry\n    def do_something_unreliable():\n        if random.randint(0, 10) > 1:\n            raise IOError(\"Broken sauce, everything is hosed!!!111one\")\n        else:\n            return \"Awesome sauce!\"\n\n    print do_something_unreliable()\n\n\nFeatures\n--------\n\n- Generic Decorator API\n- Specify stop condition (i.e. limit by number of attempts)\n- Specify wait condition (i.e. exponential backoff sleeping between attempts)\n- Customize retrying on Exceptions\n- Customize retrying on expected returned result\n\n\nInstallation\n------------\n\nTo install retrying, simply:\n\n.. code-block:: bash\n\n    $ pip install retrying\n\nOr, if you absolutely must:\n\n.. code-block:: bash\n\n    $ easy_install retrying\n\nBut, you might regret that later.\n\n\nExamples\n----------\n\nAs you saw above, the default behavior is to retry forever without waiting.\n\n.. code-block:: python\n\n    @retry\n    def never_give_up_never_surrender():\n        print \"Retry forever ignoring Exceptions, don't wait between retries\"\n\n\nLet's be a little less persistent and set some boundaries, such as the number of attempts before giving up.\n\n.. code-block:: python\n\n    @retry(stop_max_attempt_number=7)\n    def stop_after_7_attempts():\n        print \"Stopping after 7 attempts\"\n\nWe don't have all day, so let's set a boundary for how long we should be retrying stuff.\n\n.. code-block:: python\n\n    @retry(stop_max_delay=10000)\n    def stop_after_10_s():\n        print \"Stopping after 10 seconds\"\n\nMost things don't like to be polled as fast as possible, so let's just wait 2 seconds between retries.\n\n.. code-block:: python\n\n    @retry(wait_fixed=2000)\n    def wait_2_s():\n        print \"Wait 2 second between retries\"\n\n\nSome things perform best with a bit of randomness injected.\n\n.. code-block:: python\n\n    @retry(wait_random_min=1000, wait_random_max=2000)\n    def wait_random_1_to_2_s():\n        print \"Randomly wait 1 to 2 seconds between retries\"\n\nThen again, it's hard to beat exponential backoff when retrying distributed services and other remote endpoints.\n\n.. code-block:: python\n\n    @retry(wait_exponential_multiplier=1000, wait_exponential_max=10000)\n    def wait_exponential_1000():\n        print \"Wait 2^x * 1000 milliseconds between each retry, up to 10 seconds, then 10 seconds afterwards\"\n\n\nWe have a few options for dealing with retries that raise specific or general exceptions, as in the cases here.\n\n.. code-block:: python\n\n    def retry_if_io_error(exception):\n        \"\"\"Return True if we should retry (in this case when it's an IOError), False otherwise\"\"\"\n        return isinstance(exception, IOError)\n\n    @retry(retry_on_exception=retry_if_io_error)\n    def might_io_error():\n        print \"Retry forever with no wait if an IOError occurs, raise any other errors\"\n\n    @retry(retry_on_exception=retry_if_io_error, wrap_exception=True)\n    def only_raise_retry_error_when_not_io_error():\n        print \"Retry forever with no wait if an IOError occurs, raise any other errors wrapped in RetryError\"\n\nWe can also use the result of the function to alter the behavior of retrying.\n\n.. code-block:: python\n\n    def retry_if_result_none(result):\n        \"\"\"Return True if we should retry (in this case when result is None), False otherwise\"\"\"\n        return result is None\n\n    @retry(retry_on_result=retry_if_result_none)\n    def might_return_none():\n        print \"Retry forever ignoring Exceptions with no wait if return value is None\"\n\n\nAny combination of stop, wait, etc. is also supported to give you the freedom to mix and match.\n\nContribute\n----------\n\n#. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n#. Fork `the repository`_ on GitHub to start making your changes to the **master** branch (or branch off of it).\n#. Write a test which shows that the bug was fixed or that the feature works as expected.\n#. Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to AUTHORS_.\n\n.. _`the repository`: http://github.com/rholder/retrying\n.. _AUTHORS: https://github.com/rholder/retrying/blob/master/AUTHORS.rst\n\n\n.. :changelog:\n\nHistory\n-------\n1.3.3 (2014-12-14)\n++++++++++++++++++\n- Add minimum six version of 1.7.0 since anything less will break things\n\n1.3.2 (2014-11-09)\n++++++++++++++++++\n- Ensure we wrap the decorated functions to prevent information loss\n- Allow a jitter value to be passed in\n\n1.3.1 (2014-09-30)\n++++++++++++++++++\n- Add requirements.txt to MANIFEST.in to fix pip installs\n\n1.3.0 (2014-09-30)\n++++++++++++++++++\n- Add upstream six dependency, remove embedded six functionality\n\n1.2.3 (2014-08-25)\n++++++++++++++++++\n- Add support for custom wait and stop functions\n\n1.2.2 (2014-06-20)\n++++++++++++++++++\n- Bug fix to not raise a RetryError on failure when exceptions aren't being wrapped\n\n1.2.1 (2014-05-05)\n++++++++++++++++++\n- Bug fix for explicitly passing in a wait type\n\n1.2.0 (2014-05-04)\n++++++++++++++++++\n- Remove the need for explicit specification of stop/wait types when they can be inferred\n- Add a little checking for exception propagation\n\n1.1.0 (2014-03-31)\n++++++++++++++++++\n- Added proper exception propagation through reraising with Python 2.6, 2.7, and 3.2 compatibility\n- Update test suite for behavior changes\n\n1.0.1 (2013-03-20)\n++++++++++++++++++\n- Fixed a bug where classes not extending from the Python exception hierarchy could slip through\n- Update test suite for custom Python exceptions\n\n1.0.0 (2013-01-21)\n++++++++++++++++++\n- First stable, tested version now exists\n- Apache 2.0 license applied\n- Sanitizing some setup.py and test suite running\n- Added Travis CI support",
      "release_date": "2014-12-15T01:15:08",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Ray Holder",
          "email": "UNKNOWN",
          "url": null
        }
      ],
      "keywords": [
        "decorator decorators retry retrying exception exponential backoff",
        "Intended Audience :: Developers",
        "Natural Language :: English",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.2",
        "Programming Language :: Python :: 3.3",
        "Programming Language :: Python :: 3.4",
        "Topic :: Internet",
        "Topic :: Utilities"
      ],
      "homepage_url": "https://github.com/rholder/retrying",
      "download_url": "https://files.pythonhosted.org/packages/44/ef/beae4b4ef80902f22e3af073397f079c96969c69b2c7d52a57ea9ae61c9d/retrying-1.3.3.tar.gz",
      "size": 10890,
      "sha1": null,
      "md5": "2a126aeef8b21324ecdeac15ff46ef17",
      "sha256": "08c039560a6da2fe4f2c426d0766e284d3b736e355f8dd24b37367b0bb41973b",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "Apache 2.0",
        "classifiers": [
          "License :: OSI Approved :: Apache Software License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/retrying/1.3.3/json",
      "datasource_id": null,
      "purl": "pkg:pypi/retrying@1.3.3"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "shapely",
      "version": "1.7.1",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "Geometric objects, predicates, and operations\n=======\nShapely\n=======\n\n|travis| |appveyor| |coveralls|\n\n.. |travis| image:: https://travis-ci.org/Toblerity/Shapely.svg?branch=maint-1.7\n   :target: https://travis-ci.org/Toblerity/Shapely\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/Toblerity/Shapely?branch=maint-1.7&svg=true\n   :target: https://ci.appveyor.com/project/frsci/shapely?branch=maint-1.7\n\n.. |coveralls| image:: https://coveralls.io/repos/github/Toblerity/Shapely/badge.svg?branch=maint-1.7\n   :target: https://coveralls.io/github/Toblerity/Shapely?branch=maint-1.7\n\nManipulation and analysis of geometric objects in the Cartesian plane.\n\n.. image:: https://c2.staticflickr.com/6/5560/31301790086_b3472ea4e9_c.jpg\n   :width: 800\n   :height: 378\n\nShapely is a BSD-licensed Python package for manipulation and analysis of\nplanar geometric objects. It is based on the widely deployed `GEOS\n<https://trac.osgeo.org/geos/>`__ (the engine of `PostGIS\n<http://postgis.org>`__) and `JTS\n<https://locationtech.github.io/jts/>`__ (from which GEOS is ported)\nlibraries. Shapely is not concerned with data formats or coordinate systems,\nbut can be readily integrated with packages that are. For more details, see:\n\n* `Shapely GitHub repository <https://github.com/Toblerity/Shapely>`__\n* `Shapely documentation and manual <https://shapely.readthedocs.io/en/latest/>`__\n\nUsage\n=====\n\nHere is the canonical example of building an approximately circular patch by\nbuffering a point.\n\n.. code-block:: pycon\n\n    >>> from shapely.geometry import Point\n    >>> patch = Point(0.0, 0.0).buffer(10.0)\n    >>> patch\n    <shapely.geometry.polygon.Polygon object at 0x...>\n    >>> patch.area\n    313.65484905459385\n\nSee the manual for more examples and guidance.\n\nRequirements\n============\n\nShapely 1.7 requires\n\n* Python 2.7, >=3.5\n* GEOS >=3.3\n\nInstalling Shapely\n==================\n\nShapely may be installed from a source distribution or one of several kinds\nof built distribution.\n\nBuilt distributions\n-------------------\n\nBuilt distributions are the only option for users who do not have or do not\nknow how to use their platform's compiler and Python SDK, and a good option for\nusers who would rather not bother.\n\nLinux, OS X, and Windows users can get Shapely wheels with GEOS included from the\nPython Package Index with a recent version of pip (8+):\n\n.. code-block:: console\n\n    $ pip install shapely\n\nShapely is available via system package management tools like apt, yum, and\nHomebrew, and is also provided by popular Python distributions like Canopy and\nAnaconda. If you use the Conda package manager to install Shapely, be sure to\nuse the conda-forge channel.\n\nWindows users have another good installation options: the wheels published at\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely. These can be installed\nusing pip by specifying the entire URL.\n\nSource distributions\n--------------------\n\nIf you want to build Shapely from source for compatibility with other modules\nthat depend on GEOS (such as cartopy or osgeo.ogr) or want to use a different\nversion of GEOS than the one included in the project wheels you should first\ninstall the GEOS library, Cython, and Numpy on your system (using apt, yum,\nbrew, or other means) and then direct pip to ignore the binary wheels.\n\n.. code-block:: console\n\n    $ pip install shapely --no-binary shapely\n\nIf you've installed GEOS to a standard location, the geos-config program will\nbe used to get compiler and linker options. If geos-config is not on your\nexecutable, it can be specified with a GEOS_CONFIG environment variable, e.g.:\n\n.. code-block:: console\n\n    $ GEOS_CONFIG=/path/to/geos-config pip install shapely\n\nIntegration\n===========\n\nShapely does not read or write data files, but it can serialize and deserialize\nusing several well known formats and protocols. The shapely.wkb and shapely.wkt\nmodules provide dumpers and loaders inspired by Python's pickle module.\n\n.. code-block:: pycon\n\n    >>> from shapely.wkt import dumps, loads\n    >>> dumps(loads('POINT (0 0)'))\n    'POINT (0.0000000000000000 0.0000000000000000)'\n\nShapely can also integrate with other Python GIS packages using GeoJSON-like\ndicts.\n\n.. code-block:: pycon\n\n    >>> import json\n    >>> from shapely.geometry import mapping, shape\n    >>> s = shape(json.loads('{\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}'))\n    >>> s\n    <shapely.geometry.point.Point object at 0x...>\n    >>> print(json.dumps(mapping(s)))\n    {\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}\n\nDevelopment and Testing\n=======================\n\nDependencies for developing Shapely are listed in requirements-dev.txt. Cython\nand Numpy are not required for production installations, only for development.\nUse of a virtual environment is strongly recommended.\n\n.. code-block:: console\n\n    $ virtualenv .\n    $ source bin/activate\n    (env)$ pip install -r requirements-dev.txt\n    (env)$ pip install -e .\n\nThe project uses pytest to run Shapely's suite of unittests and doctests.\n\n.. code-block:: console\n\n    (env)$ python -m pytest\n\nSupport\n=======\n\nQuestions about using Shapely may be asked on the `GIS StackExchange\n<https://gis.stackexchange.com/questions/tagged/shapely>`__ using the \"shapely\"\ntag.\n\nBugs may be reported at https://github.com/Toblerity/Shapely/issues.\n\n\nCredits\n=======\n\nShapely is written by:\n\n* Allan Adair <allan.m.adair@gmail.com>\n* Andrew Blakey <ablakey@gmail.com>\n* Andy Freeland <andy@andyfreeland.net>\n* Ariel Kadouri <ariel@arielsartistry.com>\n* Aron Bierbaum <aronbierbaum@gmail.com>\n* Bart Broere <2715782+bartbroere@users.noreply.github.com>\n* Bas Couwenberg <sebastic@xs4all.nl>\n* Benjamin Root <ben.v.root@gmail.com>\n* BertrandGervais <bertrand.gervais.pro@gmail.com>\n* Brad Hards <bradh@frogmouth.net>\n* Brandon Wood <btwood@geometeor.com>\n* Chad Hawkins <cwh@chadwhawkins.com>\n* Christian Prior <cprior@gmail.com>\n* Christian Quest <github@cquest.org>\n* Christophe Pradal <christophe.pradal@inria.fr>\n* Daniele Esposti <expobrain@users.noreply.github.com>\n* Dave Collins <dave@hopest.net>\n* David Baumgold <david@davidbaumgold.com>\n* David Swinkels <davidswinkelss@gmail.com>\n* Denis Rykov <rykovd@gmail.com>\n* Erwin Sterrenburg <e.w.sterrenburg@gmail.com>\n* Felix Yan <felixonmars@archlinux.org>\n* Filipe Fernandes <ocefpaf@gmail.com>\n* Fr\u00e9d\u00e9ric Junod <frederic.junod@camptocamp.com>\n* Gabi Davar <grizzly.nyo@gmail.com>\n* Gerrit Holl <gerrit.holl@dwd.de>\n* Hannes <kannes@users.noreply.github.com>\n* Hao Zheng <Furioushaozheng@gmail.com>\n* Henry Walshaw <henry.walshaw@gmail.com>\n* Howard Butler <hobu.inc@gmail.com>\n* Hugo <hugovk@users.noreply.github.com>\n* Jacob Wasserman <jwasserman@gmail.com>\n* James Douglass <jamesdouglassusa@gmail.com>\n* James Gaboardi <jgaboardi@gmail.com>\n* James Lamb <jaylamb20@gmail.com>\n* James McBride <jdmcbr@gmail.com>\n* James Spencer <james.s.spencer@gmail.com>\n* Jamie Hall <jamie1212@gmail.com>\n* Jason Sanford <jason.sanford@mapmyfitness.com>\n* Jeethu Rao <jeethu@jeethurao.com>\n* Jeremiah England <34973839+Jeremiah-England@users.noreply.github.com>\n* Jinkun Wang <mejkunw@gmail.com>\n* Johan Euphrosine <proppy@aminche.com>\n* Johannes Sch\u00f6nberger <jschoenberger@demuc.de>\n* Jonathan Schoonhoven <jschoonhoven@lyft.com>\n* Joris Van den Bossche <jorisvandenbossche@gmail.com>\n* Joshua Arnott <josh@snorfalorpagus.net>\n* Juan Luis Cano Rodr\u00edguez <juanlu@satellogic.com>\n* Kai Lautaportti <dokai@b426a367-1105-0410-b9ff-cdf4ab011145>\n* Kelsey Jordahl <kjordahl@enthought.com>\n* Kevin Wurster <wursterk@gmail.com>\n* Konstantin Veretennicov <kveretennicov@gmail.com>\n* Koshy Thomas <koshy1123@gmail.com>\n* Kristian Evers <kristianevers@gmail.com>\n* Kyle Barron <kylebarron2@gmail.com>\n* Leandro Lima <leandro@limaesilva.com.br>\n* Lukasz <uhho@users.noreply.github.com>\n* Luke Lee <durdenmisc@gmail.com>\n* Maarten Vermeyen <maarten.vermeyen@rwo.vlaanderen.be>\n* Marc Jansen <jansen@terrestris.de>\n* Marco De Nadai <me@marcodena.it>\n* Mathieu <mathieu.nivel@gmail.com>\n* Matt Amos <matt.amos@mapzen.com>\n* Michel Blancard <michel.blancard@data.gouv.fr>\n* Mike Taves <mwtoews@gmail.com>\n* Morris Tweed <tweed.morris@gmail.com>\n* Naveen Michaud-Agrawal <naveen.michaudagrawal@gmail.com>\n* Oliver Tonnhofer <olt@bogosoft.com>\n* Pave\u0142 Ty\u015blacki <tbicr@users.noreply.github.com>\n* Peter Sagerson <psagers.github@ignorare.net>\n* Phil Elson <pelson.pub@gmail.com>\n* Pierre PACI <villerupt@gmail.com>\n* Ricardo Zilleruelo <51384295+zetaatlyft@users.noreply.github.com>\n* S Murthy <sr-murthy@users.noreply.github.com>\n* Sampo Syrjanen <sampo.syrjanen@here.com>\n* Samuel Chin <samuelchin91@gmail.com>\n* Sean Gillies <sean.gillies@gmail.com>\n* Sobolev Nikita <mail@sobolevn.me>\n* Stephan H\u00fcgel <urschrei@gmail.com>\n* Steve M. Kim <steve@climate.com>\n* Taro Matsuzawa aka. btm <btm@tech.email.ne.jp>\n* Thibault Deutsch <thibault.deutsch@gmail.com>\n* Thomas Kluyver <takowl@gmail.com>\n* Tobias Sauerwein <tobias.sauerwein@camptocamp.com>\n* Tom Caruso <carusot42@gmail.com>\n* Tom Clancy <17627475+clncy@users.noreply.github.com>\n* WANG Aiyong <gepcelway@gmail.com>\n* Will May <williamcmay@live.com>\n* Zachary Ware <zachary.ware@gmail.com>\n* cclauss <cclauss@me.com>\n* clefrks <33859587+clefrks@users.noreply.github.com>\n* davidh-ssec <david.hoese@ssec.wisc.edu>\n* georgeouzou <geothrock@gmail.com>\n* giumas <gmasetti@ccom.unh.edu>\n* joelostblom <joelostblom@users.noreply.github.com>\n* ljwolf <levi.john.wolf@gmail.com>\n* mindw <grizzly.nyo@gmail.com>\n* rsmb <rsmb@users.noreply.github.com>\n* shongololo <garethsimons@me.com>\n* solarjoe <walterwhite666@googlemail.com>\n* stephenworsley <49274989+stephenworsley@users.noreply.github.com>\n\nSee also: https://github.com/Toblerity/Shapely/graphs/contributors.\n\nAdditional help from:\n\n* Justin Bronn (GeoDjango) for ctypes inspiration\n* Martin Davis (JTS)\n* Sandro Santilli, Mateusz Loskot, Paul Ramsey, et al (GEOS Project)\n\nMajor portions of this work were supported by a grant (for Pleiades_) from the\nU.S. National Endowment for the Humanities (https://www.neh.gov).\n\n.. _Pleiades: https://pleiades.stoa.org\n\n\nChanges\n=======\n\n1.7.1 (2020-08-20)\n------------------\n\n- ``STRtree`` now safely implements the pickle protocol (#915).\n- Documentation has been added for ``minimum_clearance`` (#875, #874).\n- In ``STRtree.__del__()`` we guard against calling ``GEOSSTRtree_destroy``\n  when the lgeos module has already been torn down on exit (#897, #830).\n- Documentation for the ``overlaps()`` method has been corrected (#920).\n- Correct the test in ``shapely.geometry.base.BaseGeometry.empty()`` to\n  eliminate memory leaks like the one reported in #745.\n- Get free() not from libc but from the processes global symbols (#891),\n  fixing a bug that manifests on OS X 10.15 and 10.16.\n- Extracting substrings from complex lines has been made more correct (#848,\n  #849).\n- Splitting of complex geometries has been sped up by preparing the input\n  geometry (#871).\n- Fix bug in concatenation of function argtypes (#866).\n- Improved documentation of STRtree usage (#857).\n- Improved handling for empty list or list of lists in GeoJSON coordinates\n  (#852).\n- The polylabel algorithm now accounts for polygon holes (#851, #817).\n\n1.7.0 (2020-01-28)\n------------------\n\nThis is the final 1.7.0 release. There have been no changes since 1.7b1.\n\n1.7b1 (2020-01-13)\n------------------\n\nFirst beta release.\n\n1.7a3 (2019-12-31)\n------------------\n\nNew features:\n\n- The buffer operation can now be single-sides (#806, #727).\n\nBug fixes:\n\n- Add /usr/local/lib to the list of directories to be searched for the GEOS\n  shared library (#795).\n- ops.substring now returns a line with coords in end-to-front order when given\n  a start position that is greater than the end position (#628).\n- Implement ``__bool__()`` for geometry base classes so that ``bool(geom)``\n  returns the logical complement of ``geom.is_empty`` (#754).\n- Remove assertion on the number of version-like strings found in the GEOS\n  version string. It could be 2 or 3.\n\n1.7a2 (2019-06-21)\n------------------\n\n- Nearest neighbor search has been added to STRtree (#668).\n- Disallow sequences of MultiPolygons as arguments to the MultiPolygon\n  constructor, resolving #588.\n- Removed vendorized `functools` functions previously used to support\n  Python 2.5.\n\nBug fixes:\n\n- Avoid reloading the GEOS shared library when using an installed binary wheel\n  on OS X (#735), resolving issue #553.\n- The shapely.ops.orient function can now orient multi polygons and geometry\n  collections as well as polygons (#733).\n- Polygons can now be constructed from sequences of point objects as well as\n  sequences of x, y sequences (#732).\n- The exterior of an empty polygon is now equal to an empty linear ring (#731).\n- The bounds property of an empty point object now returns an empty tuple,\n  consistent with other geometry types (#723).\n- Segmentation faults when non-string values are passed to the WKT loader are\n  avoided by #700.\n- Failure of ops.substring when the sub linestring coincides with the beginning\n  of the linestring has been fixed (#658).\n- Segmentation faults from interpolating on an empty linestring are prevented\n  by #655.\n- A missing special case for rectangular polygons has been added to the\n  polylabel algorithm (#644).\n- LinearRing can be created from a LineString (#638).\n- The prepared geoemtry validation condition has been tightened in #632 to fix\n  the bug reported in #631.\n- Attempting to interpolate an empty geometry no longer results in a\n  segmentation fault, raising `ValueError` instead (#653).\n\n1.7a1 (2018-07-29)\n------------------\n\nNew features:\n\n- A Python version check is made by the package setup script. Shapely 1.7\n  supports only Python versions 2.7 and 3.4+ (#610).\n- Added a new `EmptyGeometry` class to support GeoPandas (#514).\n- Added new `shapely.ops.substring` function (#459).\n- Added new `shapely.ops.clip_by_rect` function (#583).\n- Use DLLs indicated in sys._MEIPASS' to support PyInstaller frozen apps\n  (#523).\n- `shapely.wkb.dumps` now accepts an `srid` integer keyword argument to write\n  WKB data including a spatial reference ID in the output data (#593).\n\nBug fixes:\n\n- `shapely.geometry.shape` can now marshal empty GeoJSON representations\n  (#573).\n- An exception is raised when an attempt is made to `prepare`\n  a `PreparedGeometry` (#577, #595).\n- Keyword arguments have been removed from a geometry object's `wkt` property\n  getter (#581, #594).\n\n1.6.4.post1 (2018-01-24)\n------------------------\n\n- Fix broken markup in this change log, which restores our nicely formatted\n  readme on PyPI.\n\n1.6.4 (2018-01-24)\n------------------\n\n- Handle a ``TypeError`` that can occur when geometries are torn down (#473,\n  #528).\n\n\n1.6.3 (2017-12-09)\n------------------\n\n- AttributeError is no longer raised when accessing __geo_interface__ of an\n  empty polygon (#450).\n- ``asShape`` now handles empty coordinates in mappings as ``shape`` does\n  (#542). Please note that ``asShape`` is likely to be deprecated in a future\n  version of Shapely.\n- Check for length of LineString coordinates in speed mode, preventing crashes\n  when using LineStrings with only one coordinate (#546).\n\n1.6.2 (2017-10-30)\n------------------\n\n- A 1.6.2.post1 release has been made to fix a problem with macosx wheels\n  uploaded to PyPI.\n\n1.6.2 (2017-10-26)\n------------------\n\n- Splitting a linestring by one of its end points will now succeed instead of\n  failing with a ``ValueError`` (#524, #533).\n- Missing documentation of a geometry's ``overlaps`` predicate has been added\n  (#522).\n\n1.6.1 (2017-09-01)\n------------------\n\n- Avoid ``STRTree`` crashes due to dangling references (#505) by maintaining\n  references to added geometries.\n- Reduce log level to debug when reporting on calls to ctypes ``CDLL()`` that\n  don't succeed and are retried (#515).\n- Clarification: applications like GeoPandas that need an empty geometry object\n  should use ``BaseGeometry()`` instead of ``Point()`` or ``Polygon()``. An\n  ``EmptyGeometry`` class has been added in the master development branch and\n  will be available in the next non-bugfix release.\n\n1.6.0 (2017-08-21)\n------------------\n\nShapely 1.6.0 adds new attributes to existing geometry classes and new\nfunctions (``split()`` and ``polylabel()``) to the shapely.ops module.\nExceptions are consolidated in a shapely.errors module and logging practices\nhave been improved. Shapely's optional features depending on Numpy are now\ngathered into a requirements set named \"vectorized\" and these may be installed\nlike ``pip install shapely[vectorized]``.\n\nMuch of the work on 1.6.0 was aimed to improve the project's build and\npackaging scripts and to minimize run-time dependencies. Shapely now vendorizes\npackaging to use during builds only and never again invokes the geos-config\nutility at run-time.\n\nIn addition to the changes listed under the alpha and beta pre-releases below,\nthe following change has been made to the project:\n\n- Project documentation is now hosted at \n  https://shapely.readthedocs.io/en/latest/.\n\nThank you all for using, promoting, and contributing to the Shapely project.\n\n1.6b5 (2017-08-18)\n------------------\n\nBug fixes:\n\n- Passing a single coordinate to ``LineString()`` with speedups disabled now\n  raises a ValueError as happens with speedups enabled. This resolves #509.\n\n1.6b4 (2017-02-15)\n------------------\n\nBug fixes:\n\n- Isolate vendorized packaging in a _vendor directory, remove obsolete\n  dist-info, and remove packaging from project requirements (resolves #468).\n\n1.6b3 (2016-12-31)\n------------------\n\nBug fixes:\n\n- Level for log messages originating from the GEOS notice handler reduced from\n  WARNING to INFO (#447).\n- Permit speedups to be imported again without Numpy (#444).\n\n1.6b2 (2016-12-12)\n------------------\n\nNew features:\n\n- Add support for GeometryCollection to shape and asShape functions (#422).\n\n1.6b1 (2016-12-12)\n------------------\n\nBug fixes:\n\n- Implemented __array_interface__ for empty Points and LineStrings (#403).\n\n1.6a3 (2016-12-01)\n------------------\n\nBug fixes:\n\n- Remove accidental hard requirement of Numpy (#431).\n\nPackaging:\n\n- Put Numpy in an optional requirement set named \"vectorized\" (#431).\n\n1.6a2 (2016-11-09)\n------------------\n\nBug fixes:\n\n- Shapely no longer configures logging in ``geos.py`` (#415).\n\nRefactoring:\n\n- Consolidation of exceptions in ``shapely.errors``.\n- ``UnsupportedGEOSVersionError`` is raised when GEOS < 3.3.0 (#407).\n\nPackaging:\n\n- Added new library search paths to assist Anaconda (#413).\n- geos-config will now be bypassed when NO_GEOS_CONFIG env var is set. This\n  allows configuration of Shapely builds on Linux systems that for whatever\n  reasons do not include the geos-config program (#322).\n\n1.6a1 (2016-09-14)\n------------------\n\nNew features:\n\n- A new error derived from NotImplementedError, with a more useful message, is\n  raised when the GEOS backend doesn't support a called method (#216).\n- The ``project()`` method of LineString has been extended to LinearRing\n  geometries (#286).\n- A new ``minimum_rotated_rectangle`` attribute has been added to the base\n  geometry class (#354).\n- A new ``shapely.ops.polylabel()`` function has been added. It\n  computes a point suited for labeling concave polygons (#395).\n- A new ``shapely.ops.split()`` function has been added. It splits a\n  geometry by another geometry of lesser dimension: polygon by line, line by\n  point (#293, #371).\n- ``Polygon.from_bounds()`` constructs a Polygon from bounding coordinates\n  (#392).\n- Support for testing with Numpy 1.4.1 has been added (#301).\n- Support creating all kinds of empty geometries from empty lists of Python\n  objects (#397, #404).\n\nRefactoring:\n\n- Switch from ``SingleSidedBuffer()`` to ``OffsetCurve()`` for GEOS >= 3.3\n  (#270).\n- Cython speedups are now enabled by default (#252).\n\nPackaging:\n\n- Packaging 16.7, a setup dependency, is vendorized (#314).\n- Infrastructure for building manylinux1 wheels has been added (#391).\n- The system's ``geos-config`` program is now only checked when ``setup.py``\n  is executed, never during normal use of the module (#244).\n- Added new library search paths to assist PyInstaller (#382) and Windows\n  (#343).\n\n1.5.17 (2016-08-31)\n-------------------\n- Bug fix: eliminate memory leak in geom_factory() (#408).\n- Bug fix: remove mention of negative distances in parallel_offset and note\n  that vertices of right hand offset lines are reversed (#284).\n\n1.5.16 (2016-05-26)\n-------------------\n- Bug fix: eliminate memory leak when unpickling geometry objects (#384, #385).\n- Bug fix: prevent crashes when attempting to pickle a prepared geometry,\n  raising ``PicklingError`` instead (#386).\n- Packaging: extension modules in the OS X wheels uploaded to PyPI link only\n  libgeos_c.dylib now (you can verify and compare to previous releases with\n  ``otool -L shapely/vectorized/_vectorized.so``).\n\n1.5.15 (2016-03-29)\n-------------------\n- Bug fix: use uintptr_t to store pointers instead of long in _geos.pxi,\n  preventing an overflow error (#372, #373). Note that this bug fix was\n  erroneously reported to have been made in 1.5.14, but was not.\n\n1.5.14 (2016-03-27)\n-------------------\n- Bug fix: use ``type()`` instead of ``isinstance()`` when evaluating geometry\n  equality, preventing instances of base and derived classes from \n  being mistaken for equals (#317).\n- Bug fix: ensure that empty geometries are created when constructors have no\n  args (#332, #333).\n- Bug fix: support app \"freezing\" better on Windows by not relying on the\n  ``__file__`` attribute (#342, #377).\n- Bug fix: ensure that empty polygons evaluate to be ``==`` (#355).\n- Bug fix: filter out empty geometries that can cause segfaults when creating\n  and loading STRtrees (#345, #348).\n- Bug fix: no longer attempt to reuse GEOS DLLs already loaded by Rasterio\n  or Fiona on OS X (#374, #375).\n\n1.5.13 (2015-10-09)\n-------------------\n- Restore setup and runtime discovery and loading of GEOS shared library to\n  state at version 1.5.9 (#326).\n- On OS X we try to reuse any GEOS shared library that may have been loaded\n  via import of Fiona or Rasterio in order to avoid a bug involving the\n  GEOS AbstractSTRtree (#324, #327).\n\n1.5.12 (2015-08-27)\n-------------------\n- Remove configuration of root logger from libgeos.py (#312).\n- Skip test_fallbacks on Windows (#308).\n- Call setlocale(locale.LC_ALL, \"\") instead of resetlocale() on Windows when\n  tearing down the locale test (#308).\n- Fix for Sphinx warnings (#309).\n- Addition of .cache, .idea, .pyd, .pdb to .gitignore (#310).\n\n1.5.11 (2015-08-23)\n-------------------\n- Remove packaging module requirement added in 1.5.10 (#305). Distutils can't \n  parse versions using 'rc', but if we stick to 'a' and 'b' we will be fine.\n\n1.5.10 (2015-08-22)\n-------------------\n- Monkey patch affinity module by absolute reference (#299).\n- Raise TopologicalError in relate() instead of crashing (#294, #295, #303).\n\n1.5.9 (2015-05-27)\n------------------\n- Fix for 64 bit speedups compatibility (#274).\n\n1.5.8 (2015-04-29)\n------------------\n- Setup file encoding bug fix (#254).\n- Support for pyinstaller (#261).\n- Major prepared geometry operation fix for Windows (#268, #269).\n- Major fix for OS X binary wheel (#262).\n\n1.5.7 (2015-03-16)\n------------------\n- Test and fix buggy error and notice handlers (#249).\n\n1.5.6 (2015-02-02)\n------------------\n- Fix setup regression (#232, #234).\n- SVG representation improvements (#233, #237).\n\n1.5.5 (2015-01-20)\n------------------\n- MANIFEST changes to restore _geox.pxi (#231).\n\n1.5.4 (2015-01-19)\n------------------\n- Fixed OS X binary wheel library load path (#224).\n\n1.5.3 (2015-01-12)\n------------------\n- Fixed ownership and potential memory leak in polygonize (#223).\n- Wider release of binary wheels for OS X.\n\n1.5.2 (2015-01-04)\n------------------\n- Fail installation if GEOS dependency is not met, preventing update breakage\n  (#218, #219).\n\n1.5.1 (2014-12-04)\n------------------\n- Restore geometry hashing (#209).\n\n1.5.0 (2014-12-02)\n------------------\n- Affine transformation speedups (#197).\n- New `==` rich comparison (#195).\n- Geometry collection constructor (#200).\n- ops.snap() backed by GEOSSnap (#201).\n- Clearer exceptions in cases of topological invalidity (#203).\n\n1.4.4 (2014-11-02)\n------------------\n- Proper conversion of numpy float32 vals to coords (#186).\n\n1.4.3 (2014-10-01)\n------------------\n- Fix for endianness bug in WKB writer (#174).\n\n1.4.2 (2014-09-29)\n------------------\n- Fix bungled 1.4.1 release (#176).\n\n1.4.1 (2014-09-23)\n------------------\n- Return of support for GEOS 3.2 (#176, #178).\n\n1.4.0 (2014-09-08)\n------------------\n- SVG representations for IPython's inline image protocol.\n- Efficient and fast vectorized contains().\n- Change mitre_limit default to 5.0; raise ValueError with 0.0 (#139).\n- Allow mix of tuples and Points in sped-up LineString ctor (#152).\n- New STRtree class (#73).\n- Add ops.nearest_points() (#147).\n- Faster creation of geometric objects from others (cloning) (#165).\n- Removal of tests from package.\n\n1.3.3 (2014-07-23)\n------------------\n- Allow single-part geometries as argument to ops.cacaded_union() (#135).\n- Support affine transformations of LinearRings (#112).\n\n1.3.2 (2014-05-13)\n------------------\n- Let LineString() take a sequence of Points (#130).\n\n1.3.1 (2014-04-22)\n------------------\n- More reliable proxy cleanup on exit (#106).\n- More robust DLL loading on all platforms (#114).\n\n1.3.0 (2013-12-31)\n------------------\n- Include support for Python 3.2 and 3.3 (#56), minimum version is now 2.6.\n- Switch to GEOS WKT/WKB Reader/Writer API, with defaults changed to enable 3D\n  output dimensions, and to 'trim' WKT output for GEOS >=3.3.0.\n- Use GEOS version instead of GEOS C API version to determine library\n  capabilities (#65).\n\n1.2.19 (2013-12-30)\n-------------------\n- Add buffering style options (#55).\n\n1.2.18 (2013-07-23)\n--------------------\n- Add shapely.ops.transform.\n- Permit empty sequences in collection constructors (#49, #50).\n- Individual polygons in MultiPolygon.__geo_interface__ are changed to tuples\n  to match Polygon.__geo_interface__ (#51).\n- Add shapely.ops.polygonize_full (#57).\n\n1.2.17 (2013-01-27)\n-------------------\n- Avoid circular import between wkt/wkb and geometry.base by moving calls\n  to GEOS serializers to the latter module.\n- Set _ndim when unpickling (issue #6).\n- Don't install DLLs to Python's DLL directory (#37).\n- Add affinity module of affine transformation (#31).\n- Fix NameError that blocked installation with PyPy (#40, #41).\n\n1.2.16 (2012-09-18)\n-------------------\n- Add ops.unary_union function.\n- Alias ops.cascaded_union to ops.unary_union when GEOS CAPI >= (1,7,0).\n- Add geos_version_string attribute to shapely.geos.\n- Ensure parent is set when child geometry is accessed.\n- Generate _speedups.c using Cython when building from repo when missing,\n  stale, or the build target is \"sdist\".\n- The is_simple predicate of invalid, self-intersecting linear rings now\n  returns ``False``.\n- Remove VERSION.txt from repo, it's now written by the distutils setup script\n  with value of shapely.__version__.\n\n1.2.15 (2012-06-27)\n-------------------\n- Eliminate numerical sensitivity in a method chaining test (Debian bug\n  #663210).\n- Account for cascaded union of random buffered test points being a polygon\n  or multipolygon (Debian bug #666655).\n- Use Cython to build speedups if it is installed.\n- Avoid stumbling over SVN revision numbers in GEOS C API version strings.\n\n1.2.14 (2012-01-23)\n-------------------\n- A geometry's coords property is now sliceable, yielding a list of coordinate\n  values.\n- Homogeneous collections are now sliceable, yielding a new collection of the\n  same type.\n\n1.2.13 (2011-09-16)\n-------------------\n- Fixed errors in speedups on 32bit systems when GEOS references memory above\n  2GB.\n- Add shapely.__version__ attribute.\n- Update the manual.\n\n1.2.12 (2011-08-15)\n-------------------\n- Build Windows distributions with VC7 or VC9 as appropriate.\n- More verbose report on failure to speed up.\n- Fix for prepared geometries broken in 1.2.11.\n- DO NOT INSTALL 1.2.11\n\n1.2.11 (2011-08-04)\n-------------------\n- Ignore AttributeError during exit.\n- PyPy 1.5 support.\n- Prevent operation on prepared geometry crasher (#12).\n- Optional Cython speedups for Windows.\n- Linux 3 platform support.\n\n1.2.10 (2011-05-09)\n-------------------\n- Add optional Cython speedups.\n- Add is_cww predicate to LinearRing.\n- Add function that forces orientation of Polygons.\n- Disable build of speedups on Windows pending packaging work.\n\n1.2.9 (2011-03-31)\n------------------\n- Remove extra glob import.\n- Move examples to shapely.examples.\n- Add box() constructor for rectangular polygons.\n- Fix extraneous imports.\n\n1.2.8 (2011-12-03)\n------------------\n- New parallel_offset method (#6).\n- Support for Python 2.4.\n\n1.2.7 (2010-11-05)\n------------------\n- Support for Windows eggs.\n\n1.2.6 (2010-10-21)\n------------------\n- The geoms property of an empty collection yields [] instead of a ValueError\n  (#3).\n- The coords and geometry type sproperties have the same behavior as above.\n- Ensure that z values carry through into products of operations (#4).\n\n1.2.5 (2010-09-19)\n------------------\n- Stop distributing docs/_build.\n- Include library fallbacks in test_dlls.py for linux platform.\n\n1.2.4 (2010-09-09)\n------------------\n- Raise AttributeError when there's no backend support for a method.\n- Raise OSError if libgeos_c.so (or variants) can't be found and loaded.\n- Add geos_c DLL loading support for linux platforms where find_library doesn't\n  work.\n\n1.2.3 (2010-08-17)\n------------------\n- Add mapping function.\n- Fix problem with GEOSisValidReason symbol for GEOS < 3.1.\n\n1.2.2 (2010-07-23)\n------------------\n- Add representative_point method.\n\n1.2.1 (2010-06-23)\n------------------\n- Fixed bounds of singular polygons.\n- Added shapely.validation.explain_validity function (#226).\n\n1.2 (2010-05-27)\n----------------\n- Final release.\n\n1.2rc2 (2010-05-26)\n-------------------\n- Add examples and tests to MANIFEST.in.\n- Release candidate 2.\n\n1.2rc1 (2010-05-25)\n-------------------\n- Release candidate.\n\n1.2b7 (2010-04-22)\n------------------\n- Memory leak associated with new empty geometry state fixed.\n\n1.2b6 (2010-04-13)\n------------------\n- Broken GeometryCollection fixed.\n\n1.2b5 (2010-04-09)\n------------------\n- Objects can be constructed from others of the same type, thereby making\n  copies. Collections can be constructed from sequences of objects, also making\n  copies.\n- Collections are now iterators over their component objects.\n- New code for manual figures, using the descartes package.\n\n1.2b4 (2010-03-19)\n------------------\n- Adds support for the \"sunos5\" platform.\n\n1.2b3 (2010-02-28)\n------------------\n- Only provide simplification implementations for GEOS C API >= 1.5.\n\n1.2b2 (2010-02-19)\n------------------\n- Fix cascaded_union bug introduced in 1.2b1 (#212).\n\n1.2b1 (2010-02-18)\n------------------\n- Update the README. Remove cruft from setup.py. Add some version 1.2 metadata\n  regarding required Python version (>=2.5,<3) and external dependency\n  (libgeos_c >= 3.1).\n\n1.2a6 (2010-02-09)\n------------------\n- Add accessor for separate arrays of X and Y values (#210).\n\nTODO: fill gap here\n\n1.2a1 (2010-01-20)\n------------------\n- Proper prototyping of WKB writer, and avoidance of errors on 64-bit systems\n  (#191).\n- Prototype libgeos_c functions in a way that lets py2exe apps import shapely\n  (#189).\n\n1.2 Branched (2009-09-19)\n\n1.0.12 (2009-04-09)\n-------------------\n- Fix for references held by topology and predicate descriptors.\n\n1.0.11 (2008-11-20)\n-------------------\n- Work around bug in GEOS 2.2.3, GEOSCoordSeq_getOrdinate not exported properly\n  (#178).\n\n1.0.10 (2008-11-17)\n-------------------\n- Fixed compatibility with GEOS 2.2.3 that was broken in 1.0.8 release (#176).\n\n1.0.9 (2008-11-16)\n------------------\n- Find and load MacPorts libgeos.\n\n1.0.8 (2008-11-01)\n------------------\n- Fill out GEOS function result and argument types to prevent faults on a\n  64-bit arch.\n\n1.0.7 (2008-08-22)\n------------------\n- Polygon rings now have the same dimensions as parent (#168).\n- Eliminated reference cycles in polygons (#169).\n\n1.0.6 (2008-07-10)\n------------------\n- Fixed adaptation of multi polygon data.\n- Raise exceptions earlier from binary predicates.\n- Beginning distributing new windows DLLs (#166).\n\n1.0.5 (2008-05-20)\n------------------\n- Added access to GEOS polygonizer function.\n- Raise exception when insufficient coordinate tuples are passed to LinearRing\n  constructor (#164).\n\n1.0.4 (2008-05-01)\n------------------\n- Disentangle Python and topological equality (#163).\n- Add shape(), a factory that copies coordinates from a geo interface provider.\n  To be used instead of asShape() unless you really need to store coordinates\n  outside shapely for efficient use in other code.\n- Cache GEOS geometries in adapters (#163).\n\n1.0.3 (2008-04-09)\n------------------\n- Do not release GIL when calling GEOS functions (#158).\n- Prevent faults when chaining multiple GEOS operators (#159).\n\n1.0.2 (2008-02-26)\n------------------\n- Fix loss of dimensionality in polygon rings (#155).\n\n1.0.1 (2008-02-08)\n------------------\n- Allow chaining expressions involving coordinate sequences and geometry parts\n  (#151).\n- Protect against abnormal use of coordinate accessors (#152).\n- Coordinate sequences now implement the numpy array protocol (#153).\n\n1.0 (2008-01-18)\n----------------\n- Final release.\n\n1.0 RC2 (2008-01-16)\n--------------------\n- Added temporary solution for #149.\n\n1.0 RC1 (2008-01-14)\n--------------------\n- First release candidate",
      "release_date": "2020-08-20T23:30:55",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Sean Gillies",
          "email": "sean.gillies@gmail.com",
          "url": null
        },
        {
          "type": "person",
          "role": "maintainer",
          "name": "Sean Gillies",
          "email": "sean.gillies@gmail.com",
          "url": null
        }
      ],
      "keywords": [
        "geometry topology gis",
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: GIS"
      ],
      "homepage_url": "https://github.com/Toblerity/Shapely",
      "download_url": "https://files.pythonhosted.org/packages/36/a0/7c1d7398f8c176b8d50b70de2608b7128611c1dc15ae5c627a0fda225eb0/Shapely-1.7.1-cp38-cp38-manylinux1_x86_64.whl",
      "size": 1025073,
      "sha1": null,
      "md5": "80d2163f7f796e3c8804113c1619b546",
      "sha256": "90a3e2ae0d6d7d50ff2370ba168fbd416a53e7d8448410758c5d6a5920646c1d",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "BSD",
        "classifiers": [
          "License :: OSI Approved :: BSD License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/shapely/1.7.1/json",
      "datasource_id": null,
      "purl": "pkg:pypi/shapely@1.7.1"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "shapely",
      "version": "1.7.1",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "Geometric objects, predicates, and operations\n=======\nShapely\n=======\n\n|travis| |appveyor| |coveralls|\n\n.. |travis| image:: https://travis-ci.org/Toblerity/Shapely.svg?branch=maint-1.7\n   :target: https://travis-ci.org/Toblerity/Shapely\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/Toblerity/Shapely?branch=maint-1.7&svg=true\n   :target: https://ci.appveyor.com/project/frsci/shapely?branch=maint-1.7\n\n.. |coveralls| image:: https://coveralls.io/repos/github/Toblerity/Shapely/badge.svg?branch=maint-1.7\n   :target: https://coveralls.io/github/Toblerity/Shapely?branch=maint-1.7\n\nManipulation and analysis of geometric objects in the Cartesian plane.\n\n.. image:: https://c2.staticflickr.com/6/5560/31301790086_b3472ea4e9_c.jpg\n   :width: 800\n   :height: 378\n\nShapely is a BSD-licensed Python package for manipulation and analysis of\nplanar geometric objects. It is based on the widely deployed `GEOS\n<https://trac.osgeo.org/geos/>`__ (the engine of `PostGIS\n<http://postgis.org>`__) and `JTS\n<https://locationtech.github.io/jts/>`__ (from which GEOS is ported)\nlibraries. Shapely is not concerned with data formats or coordinate systems,\nbut can be readily integrated with packages that are. For more details, see:\n\n* `Shapely GitHub repository <https://github.com/Toblerity/Shapely>`__\n* `Shapely documentation and manual <https://shapely.readthedocs.io/en/latest/>`__\n\nUsage\n=====\n\nHere is the canonical example of building an approximately circular patch by\nbuffering a point.\n\n.. code-block:: pycon\n\n    >>> from shapely.geometry import Point\n    >>> patch = Point(0.0, 0.0).buffer(10.0)\n    >>> patch\n    <shapely.geometry.polygon.Polygon object at 0x...>\n    >>> patch.area\n    313.65484905459385\n\nSee the manual for more examples and guidance.\n\nRequirements\n============\n\nShapely 1.7 requires\n\n* Python 2.7, >=3.5\n* GEOS >=3.3\n\nInstalling Shapely\n==================\n\nShapely may be installed from a source distribution or one of several kinds\nof built distribution.\n\nBuilt distributions\n-------------------\n\nBuilt distributions are the only option for users who do not have or do not\nknow how to use their platform's compiler and Python SDK, and a good option for\nusers who would rather not bother.\n\nLinux, OS X, and Windows users can get Shapely wheels with GEOS included from the\nPython Package Index with a recent version of pip (8+):\n\n.. code-block:: console\n\n    $ pip install shapely\n\nShapely is available via system package management tools like apt, yum, and\nHomebrew, and is also provided by popular Python distributions like Canopy and\nAnaconda. If you use the Conda package manager to install Shapely, be sure to\nuse the conda-forge channel.\n\nWindows users have another good installation options: the wheels published at\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely. These can be installed\nusing pip by specifying the entire URL.\n\nSource distributions\n--------------------\n\nIf you want to build Shapely from source for compatibility with other modules\nthat depend on GEOS (such as cartopy or osgeo.ogr) or want to use a different\nversion of GEOS than the one included in the project wheels you should first\ninstall the GEOS library, Cython, and Numpy on your system (using apt, yum,\nbrew, or other means) and then direct pip to ignore the binary wheels.\n\n.. code-block:: console\n\n    $ pip install shapely --no-binary shapely\n\nIf you've installed GEOS to a standard location, the geos-config program will\nbe used to get compiler and linker options. If geos-config is not on your\nexecutable, it can be specified with a GEOS_CONFIG environment variable, e.g.:\n\n.. code-block:: console\n\n    $ GEOS_CONFIG=/path/to/geos-config pip install shapely\n\nIntegration\n===========\n\nShapely does not read or write data files, but it can serialize and deserialize\nusing several well known formats and protocols. The shapely.wkb and shapely.wkt\nmodules provide dumpers and loaders inspired by Python's pickle module.\n\n.. code-block:: pycon\n\n    >>> from shapely.wkt import dumps, loads\n    >>> dumps(loads('POINT (0 0)'))\n    'POINT (0.0000000000000000 0.0000000000000000)'\n\nShapely can also integrate with other Python GIS packages using GeoJSON-like\ndicts.\n\n.. code-block:: pycon\n\n    >>> import json\n    >>> from shapely.geometry import mapping, shape\n    >>> s = shape(json.loads('{\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}'))\n    >>> s\n    <shapely.geometry.point.Point object at 0x...>\n    >>> print(json.dumps(mapping(s)))\n    {\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}\n\nDevelopment and Testing\n=======================\n\nDependencies for developing Shapely are listed in requirements-dev.txt. Cython\nand Numpy are not required for production installations, only for development.\nUse of a virtual environment is strongly recommended.\n\n.. code-block:: console\n\n    $ virtualenv .\n    $ source bin/activate\n    (env)$ pip install -r requirements-dev.txt\n    (env)$ pip install -e .\n\nThe project uses pytest to run Shapely's suite of unittests and doctests.\n\n.. code-block:: console\n\n    (env)$ python -m pytest\n\nSupport\n=======\n\nQuestions about using Shapely may be asked on the `GIS StackExchange\n<https://gis.stackexchange.com/questions/tagged/shapely>`__ using the \"shapely\"\ntag.\n\nBugs may be reported at https://github.com/Toblerity/Shapely/issues.\n\n\nCredits\n=======\n\nShapely is written by:\n\n* Allan Adair <allan.m.adair@gmail.com>\n* Andrew Blakey <ablakey@gmail.com>\n* Andy Freeland <andy@andyfreeland.net>\n* Ariel Kadouri <ariel@arielsartistry.com>\n* Aron Bierbaum <aronbierbaum@gmail.com>\n* Bart Broere <2715782+bartbroere@users.noreply.github.com>\n* Bas Couwenberg <sebastic@xs4all.nl>\n* Benjamin Root <ben.v.root@gmail.com>\n* BertrandGervais <bertrand.gervais.pro@gmail.com>\n* Brad Hards <bradh@frogmouth.net>\n* Brandon Wood <btwood@geometeor.com>\n* Chad Hawkins <cwh@chadwhawkins.com>\n* Christian Prior <cprior@gmail.com>\n* Christian Quest <github@cquest.org>\n* Christophe Pradal <christophe.pradal@inria.fr>\n* Daniele Esposti <expobrain@users.noreply.github.com>\n* Dave Collins <dave@hopest.net>\n* David Baumgold <david@davidbaumgold.com>\n* David Swinkels <davidswinkelss@gmail.com>\n* Denis Rykov <rykovd@gmail.com>\n* Erwin Sterrenburg <e.w.sterrenburg@gmail.com>\n* Felix Yan <felixonmars@archlinux.org>\n* Filipe Fernandes <ocefpaf@gmail.com>\n* Fr\u00e9d\u00e9ric Junod <frederic.junod@camptocamp.com>\n* Gabi Davar <grizzly.nyo@gmail.com>\n* Gerrit Holl <gerrit.holl@dwd.de>\n* Hannes <kannes@users.noreply.github.com>\n* Hao Zheng <Furioushaozheng@gmail.com>\n* Henry Walshaw <henry.walshaw@gmail.com>\n* Howard Butler <hobu.inc@gmail.com>\n* Hugo <hugovk@users.noreply.github.com>\n* Jacob Wasserman <jwasserman@gmail.com>\n* James Douglass <jamesdouglassusa@gmail.com>\n* James Gaboardi <jgaboardi@gmail.com>\n* James Lamb <jaylamb20@gmail.com>\n* James McBride <jdmcbr@gmail.com>\n* James Spencer <james.s.spencer@gmail.com>\n* Jamie Hall <jamie1212@gmail.com>\n* Jason Sanford <jason.sanford@mapmyfitness.com>\n* Jeethu Rao <jeethu@jeethurao.com>\n* Jeremiah England <34973839+Jeremiah-England@users.noreply.github.com>\n* Jinkun Wang <mejkunw@gmail.com>\n* Johan Euphrosine <proppy@aminche.com>\n* Johannes Sch\u00f6nberger <jschoenberger@demuc.de>\n* Jonathan Schoonhoven <jschoonhoven@lyft.com>\n* Joris Van den Bossche <jorisvandenbossche@gmail.com>\n* Joshua Arnott <josh@snorfalorpagus.net>\n* Juan Luis Cano Rodr\u00edguez <juanlu@satellogic.com>\n* Kai Lautaportti <dokai@b426a367-1105-0410-b9ff-cdf4ab011145>\n* Kelsey Jordahl <kjordahl@enthought.com>\n* Kevin Wurster <wursterk@gmail.com>\n* Konstantin Veretennicov <kveretennicov@gmail.com>\n* Koshy Thomas <koshy1123@gmail.com>\n* Kristian Evers <kristianevers@gmail.com>\n* Kyle Barron <kylebarron2@gmail.com>\n* Leandro Lima <leandro@limaesilva.com.br>\n* Lukasz <uhho@users.noreply.github.com>\n* Luke Lee <durdenmisc@gmail.com>\n* Maarten Vermeyen <maarten.vermeyen@rwo.vlaanderen.be>\n* Marc Jansen <jansen@terrestris.de>\n* Marco De Nadai <me@marcodena.it>\n* Mathieu <mathieu.nivel@gmail.com>\n* Matt Amos <matt.amos@mapzen.com>\n* Michel Blancard <michel.blancard@data.gouv.fr>\n* Mike Taves <mwtoews@gmail.com>\n* Morris Tweed <tweed.morris@gmail.com>\n* Naveen Michaud-Agrawal <naveen.michaudagrawal@gmail.com>\n* Oliver Tonnhofer <olt@bogosoft.com>\n* Pave\u0142 Ty\u015blacki <tbicr@users.noreply.github.com>\n* Peter Sagerson <psagers.github@ignorare.net>\n* Phil Elson <pelson.pub@gmail.com>\n* Pierre PACI <villerupt@gmail.com>\n* Ricardo Zilleruelo <51384295+zetaatlyft@users.noreply.github.com>\n* S Murthy <sr-murthy@users.noreply.github.com>\n* Sampo Syrjanen <sampo.syrjanen@here.com>\n* Samuel Chin <samuelchin91@gmail.com>\n* Sean Gillies <sean.gillies@gmail.com>\n* Sobolev Nikita <mail@sobolevn.me>\n* Stephan H\u00fcgel <urschrei@gmail.com>\n* Steve M. Kim <steve@climate.com>\n* Taro Matsuzawa aka. btm <btm@tech.email.ne.jp>\n* Thibault Deutsch <thibault.deutsch@gmail.com>\n* Thomas Kluyver <takowl@gmail.com>\n* Tobias Sauerwein <tobias.sauerwein@camptocamp.com>\n* Tom Caruso <carusot42@gmail.com>\n* Tom Clancy <17627475+clncy@users.noreply.github.com>\n* WANG Aiyong <gepcelway@gmail.com>\n* Will May <williamcmay@live.com>\n* Zachary Ware <zachary.ware@gmail.com>\n* cclauss <cclauss@me.com>\n* clefrks <33859587+clefrks@users.noreply.github.com>\n* davidh-ssec <david.hoese@ssec.wisc.edu>\n* georgeouzou <geothrock@gmail.com>\n* giumas <gmasetti@ccom.unh.edu>\n* joelostblom <joelostblom@users.noreply.github.com>\n* ljwolf <levi.john.wolf@gmail.com>\n* mindw <grizzly.nyo@gmail.com>\n* rsmb <rsmb@users.noreply.github.com>\n* shongololo <garethsimons@me.com>\n* solarjoe <walterwhite666@googlemail.com>\n* stephenworsley <49274989+stephenworsley@users.noreply.github.com>\n\nSee also: https://github.com/Toblerity/Shapely/graphs/contributors.\n\nAdditional help from:\n\n* Justin Bronn (GeoDjango) for ctypes inspiration\n* Martin Davis (JTS)\n* Sandro Santilli, Mateusz Loskot, Paul Ramsey, et al (GEOS Project)\n\nMajor portions of this work were supported by a grant (for Pleiades_) from the\nU.S. National Endowment for the Humanities (https://www.neh.gov).\n\n.. _Pleiades: https://pleiades.stoa.org\n\n\nChanges\n=======\n\n1.7.1 (2020-08-20)\n------------------\n\n- ``STRtree`` now safely implements the pickle protocol (#915).\n- Documentation has been added for ``minimum_clearance`` (#875, #874).\n- In ``STRtree.__del__()`` we guard against calling ``GEOSSTRtree_destroy``\n  when the lgeos module has already been torn down on exit (#897, #830).\n- Documentation for the ``overlaps()`` method has been corrected (#920).\n- Correct the test in ``shapely.geometry.base.BaseGeometry.empty()`` to\n  eliminate memory leaks like the one reported in #745.\n- Get free() not from libc but from the processes global symbols (#891),\n  fixing a bug that manifests on OS X 10.15 and 10.16.\n- Extracting substrings from complex lines has been made more correct (#848,\n  #849).\n- Splitting of complex geometries has been sped up by preparing the input\n  geometry (#871).\n- Fix bug in concatenation of function argtypes (#866).\n- Improved documentation of STRtree usage (#857).\n- Improved handling for empty list or list of lists in GeoJSON coordinates\n  (#852).\n- The polylabel algorithm now accounts for polygon holes (#851, #817).\n\n1.7.0 (2020-01-28)\n------------------\n\nThis is the final 1.7.0 release. There have been no changes since 1.7b1.\n\n1.7b1 (2020-01-13)\n------------------\n\nFirst beta release.\n\n1.7a3 (2019-12-31)\n------------------\n\nNew features:\n\n- The buffer operation can now be single-sides (#806, #727).\n\nBug fixes:\n\n- Add /usr/local/lib to the list of directories to be searched for the GEOS\n  shared library (#795).\n- ops.substring now returns a line with coords in end-to-front order when given\n  a start position that is greater than the end position (#628).\n- Implement ``__bool__()`` for geometry base classes so that ``bool(geom)``\n  returns the logical complement of ``geom.is_empty`` (#754).\n- Remove assertion on the number of version-like strings found in the GEOS\n  version string. It could be 2 or 3.\n\n1.7a2 (2019-06-21)\n------------------\n\n- Nearest neighbor search has been added to STRtree (#668).\n- Disallow sequences of MultiPolygons as arguments to the MultiPolygon\n  constructor, resolving #588.\n- Removed vendorized `functools` functions previously used to support\n  Python 2.5.\n\nBug fixes:\n\n- Avoid reloading the GEOS shared library when using an installed binary wheel\n  on OS X (#735), resolving issue #553.\n- The shapely.ops.orient function can now orient multi polygons and geometry\n  collections as well as polygons (#733).\n- Polygons can now be constructed from sequences of point objects as well as\n  sequences of x, y sequences (#732).\n- The exterior of an empty polygon is now equal to an empty linear ring (#731).\n- The bounds property of an empty point object now returns an empty tuple,\n  consistent with other geometry types (#723).\n- Segmentation faults when non-string values are passed to the WKT loader are\n  avoided by #700.\n- Failure of ops.substring when the sub linestring coincides with the beginning\n  of the linestring has been fixed (#658).\n- Segmentation faults from interpolating on an empty linestring are prevented\n  by #655.\n- A missing special case for rectangular polygons has been added to the\n  polylabel algorithm (#644).\n- LinearRing can be created from a LineString (#638).\n- The prepared geoemtry validation condition has been tightened in #632 to fix\n  the bug reported in #631.\n- Attempting to interpolate an empty geometry no longer results in a\n  segmentation fault, raising `ValueError` instead (#653).\n\n1.7a1 (2018-07-29)\n------------------\n\nNew features:\n\n- A Python version check is made by the package setup script. Shapely 1.7\n  supports only Python versions 2.7 and 3.4+ (#610).\n- Added a new `EmptyGeometry` class to support GeoPandas (#514).\n- Added new `shapely.ops.substring` function (#459).\n- Added new `shapely.ops.clip_by_rect` function (#583).\n- Use DLLs indicated in sys._MEIPASS' to support PyInstaller frozen apps\n  (#523).\n- `shapely.wkb.dumps` now accepts an `srid` integer keyword argument to write\n  WKB data including a spatial reference ID in the output data (#593).\n\nBug fixes:\n\n- `shapely.geometry.shape` can now marshal empty GeoJSON representations\n  (#573).\n- An exception is raised when an attempt is made to `prepare`\n  a `PreparedGeometry` (#577, #595).\n- Keyword arguments have been removed from a geometry object's `wkt` property\n  getter (#581, #594).\n\n1.6.4.post1 (2018-01-24)\n------------------------\n\n- Fix broken markup in this change log, which restores our nicely formatted\n  readme on PyPI.\n\n1.6.4 (2018-01-24)\n------------------\n\n- Handle a ``TypeError`` that can occur when geometries are torn down (#473,\n  #528).\n\n\n1.6.3 (2017-12-09)\n------------------\n\n- AttributeError is no longer raised when accessing __geo_interface__ of an\n  empty polygon (#450).\n- ``asShape`` now handles empty coordinates in mappings as ``shape`` does\n  (#542). Please note that ``asShape`` is likely to be deprecated in a future\n  version of Shapely.\n- Check for length of LineString coordinates in speed mode, preventing crashes\n  when using LineStrings with only one coordinate (#546).\n\n1.6.2 (2017-10-30)\n------------------\n\n- A 1.6.2.post1 release has been made to fix a problem with macosx wheels\n  uploaded to PyPI.\n\n1.6.2 (2017-10-26)\n------------------\n\n- Splitting a linestring by one of its end points will now succeed instead of\n  failing with a ``ValueError`` (#524, #533).\n- Missing documentation of a geometry's ``overlaps`` predicate has been added\n  (#522).\n\n1.6.1 (2017-09-01)\n------------------\n\n- Avoid ``STRTree`` crashes due to dangling references (#505) by maintaining\n  references to added geometries.\n- Reduce log level to debug when reporting on calls to ctypes ``CDLL()`` that\n  don't succeed and are retried (#515).\n- Clarification: applications like GeoPandas that need an empty geometry object\n  should use ``BaseGeometry()`` instead of ``Point()`` or ``Polygon()``. An\n  ``EmptyGeometry`` class has been added in the master development branch and\n  will be available in the next non-bugfix release.\n\n1.6.0 (2017-08-21)\n------------------\n\nShapely 1.6.0 adds new attributes to existing geometry classes and new\nfunctions (``split()`` and ``polylabel()``) to the shapely.ops module.\nExceptions are consolidated in a shapely.errors module and logging practices\nhave been improved. Shapely's optional features depending on Numpy are now\ngathered into a requirements set named \"vectorized\" and these may be installed\nlike ``pip install shapely[vectorized]``.\n\nMuch of the work on 1.6.0 was aimed to improve the project's build and\npackaging scripts and to minimize run-time dependencies. Shapely now vendorizes\npackaging to use during builds only and never again invokes the geos-config\nutility at run-time.\n\nIn addition to the changes listed under the alpha and beta pre-releases below,\nthe following change has been made to the project:\n\n- Project documentation is now hosted at \n  https://shapely.readthedocs.io/en/latest/.\n\nThank you all for using, promoting, and contributing to the Shapely project.\n\n1.6b5 (2017-08-18)\n------------------\n\nBug fixes:\n\n- Passing a single coordinate to ``LineString()`` with speedups disabled now\n  raises a ValueError as happens with speedups enabled. This resolves #509.\n\n1.6b4 (2017-02-15)\n------------------\n\nBug fixes:\n\n- Isolate vendorized packaging in a _vendor directory, remove obsolete\n  dist-info, and remove packaging from project requirements (resolves #468).\n\n1.6b3 (2016-12-31)\n------------------\n\nBug fixes:\n\n- Level for log messages originating from the GEOS notice handler reduced from\n  WARNING to INFO (#447).\n- Permit speedups to be imported again without Numpy (#444).\n\n1.6b2 (2016-12-12)\n------------------\n\nNew features:\n\n- Add support for GeometryCollection to shape and asShape functions (#422).\n\n1.6b1 (2016-12-12)\n------------------\n\nBug fixes:\n\n- Implemented __array_interface__ for empty Points and LineStrings (#403).\n\n1.6a3 (2016-12-01)\n------------------\n\nBug fixes:\n\n- Remove accidental hard requirement of Numpy (#431).\n\nPackaging:\n\n- Put Numpy in an optional requirement set named \"vectorized\" (#431).\n\n1.6a2 (2016-11-09)\n------------------\n\nBug fixes:\n\n- Shapely no longer configures logging in ``geos.py`` (#415).\n\nRefactoring:\n\n- Consolidation of exceptions in ``shapely.errors``.\n- ``UnsupportedGEOSVersionError`` is raised when GEOS < 3.3.0 (#407).\n\nPackaging:\n\n- Added new library search paths to assist Anaconda (#413).\n- geos-config will now be bypassed when NO_GEOS_CONFIG env var is set. This\n  allows configuration of Shapely builds on Linux systems that for whatever\n  reasons do not include the geos-config program (#322).\n\n1.6a1 (2016-09-14)\n------------------\n\nNew features:\n\n- A new error derived from NotImplementedError, with a more useful message, is\n  raised when the GEOS backend doesn't support a called method (#216).\n- The ``project()`` method of LineString has been extended to LinearRing\n  geometries (#286).\n- A new ``minimum_rotated_rectangle`` attribute has been added to the base\n  geometry class (#354).\n- A new ``shapely.ops.polylabel()`` function has been added. It\n  computes a point suited for labeling concave polygons (#395).\n- A new ``shapely.ops.split()`` function has been added. It splits a\n  geometry by another geometry of lesser dimension: polygon by line, line by\n  point (#293, #371).\n- ``Polygon.from_bounds()`` constructs a Polygon from bounding coordinates\n  (#392).\n- Support for testing with Numpy 1.4.1 has been added (#301).\n- Support creating all kinds of empty geometries from empty lists of Python\n  objects (#397, #404).\n\nRefactoring:\n\n- Switch from ``SingleSidedBuffer()`` to ``OffsetCurve()`` for GEOS >= 3.3\n  (#270).\n- Cython speedups are now enabled by default (#252).\n\nPackaging:\n\n- Packaging 16.7, a setup dependency, is vendorized (#314).\n- Infrastructure for building manylinux1 wheels has been added (#391).\n- The system's ``geos-config`` program is now only checked when ``setup.py``\n  is executed, never during normal use of the module (#244).\n- Added new library search paths to assist PyInstaller (#382) and Windows\n  (#343).\n\n1.5.17 (2016-08-31)\n-------------------\n- Bug fix: eliminate memory leak in geom_factory() (#408).\n- Bug fix: remove mention of negative distances in parallel_offset and note\n  that vertices of right hand offset lines are reversed (#284).\n\n1.5.16 (2016-05-26)\n-------------------\n- Bug fix: eliminate memory leak when unpickling geometry objects (#384, #385).\n- Bug fix: prevent crashes when attempting to pickle a prepared geometry,\n  raising ``PicklingError`` instead (#386).\n- Packaging: extension modules in the OS X wheels uploaded to PyPI link only\n  libgeos_c.dylib now (you can verify and compare to previous releases with\n  ``otool -L shapely/vectorized/_vectorized.so``).\n\n1.5.15 (2016-03-29)\n-------------------\n- Bug fix: use uintptr_t to store pointers instead of long in _geos.pxi,\n  preventing an overflow error (#372, #373). Note that this bug fix was\n  erroneously reported to have been made in 1.5.14, but was not.\n\n1.5.14 (2016-03-27)\n-------------------\n- Bug fix: use ``type()`` instead of ``isinstance()`` when evaluating geometry\n  equality, preventing instances of base and derived classes from \n  being mistaken for equals (#317).\n- Bug fix: ensure that empty geometries are created when constructors have no\n  args (#332, #333).\n- Bug fix: support app \"freezing\" better on Windows by not relying on the\n  ``__file__`` attribute (#342, #377).\n- Bug fix: ensure that empty polygons evaluate to be ``==`` (#355).\n- Bug fix: filter out empty geometries that can cause segfaults when creating\n  and loading STRtrees (#345, #348).\n- Bug fix: no longer attempt to reuse GEOS DLLs already loaded by Rasterio\n  or Fiona on OS X (#374, #375).\n\n1.5.13 (2015-10-09)\n-------------------\n- Restore setup and runtime discovery and loading of GEOS shared library to\n  state at version 1.5.9 (#326).\n- On OS X we try to reuse any GEOS shared library that may have been loaded\n  via import of Fiona or Rasterio in order to avoid a bug involving the\n  GEOS AbstractSTRtree (#324, #327).\n\n1.5.12 (2015-08-27)\n-------------------\n- Remove configuration of root logger from libgeos.py (#312).\n- Skip test_fallbacks on Windows (#308).\n- Call setlocale(locale.LC_ALL, \"\") instead of resetlocale() on Windows when\n  tearing down the locale test (#308).\n- Fix for Sphinx warnings (#309).\n- Addition of .cache, .idea, .pyd, .pdb to .gitignore (#310).\n\n1.5.11 (2015-08-23)\n-------------------\n- Remove packaging module requirement added in 1.5.10 (#305). Distutils can't \n  parse versions using 'rc', but if we stick to 'a' and 'b' we will be fine.\n\n1.5.10 (2015-08-22)\n-------------------\n- Monkey patch affinity module by absolute reference (#299).\n- Raise TopologicalError in relate() instead of crashing (#294, #295, #303).\n\n1.5.9 (2015-05-27)\n------------------\n- Fix for 64 bit speedups compatibility (#274).\n\n1.5.8 (2015-04-29)\n------------------\n- Setup file encoding bug fix (#254).\n- Support for pyinstaller (#261).\n- Major prepared geometry operation fix for Windows (#268, #269).\n- Major fix for OS X binary wheel (#262).\n\n1.5.7 (2015-03-16)\n------------------\n- Test and fix buggy error and notice handlers (#249).\n\n1.5.6 (2015-02-02)\n------------------\n- Fix setup regression (#232, #234).\n- SVG representation improvements (#233, #237).\n\n1.5.5 (2015-01-20)\n------------------\n- MANIFEST changes to restore _geox.pxi (#231).\n\n1.5.4 (2015-01-19)\n------------------\n- Fixed OS X binary wheel library load path (#224).\n\n1.5.3 (2015-01-12)\n------------------\n- Fixed ownership and potential memory leak in polygonize (#223).\n- Wider release of binary wheels for OS X.\n\n1.5.2 (2015-01-04)\n------------------\n- Fail installation if GEOS dependency is not met, preventing update breakage\n  (#218, #219).\n\n1.5.1 (2014-12-04)\n------------------\n- Restore geometry hashing (#209).\n\n1.5.0 (2014-12-02)\n------------------\n- Affine transformation speedups (#197).\n- New `==` rich comparison (#195).\n- Geometry collection constructor (#200).\n- ops.snap() backed by GEOSSnap (#201).\n- Clearer exceptions in cases of topological invalidity (#203).\n\n1.4.4 (2014-11-02)\n------------------\n- Proper conversion of numpy float32 vals to coords (#186).\n\n1.4.3 (2014-10-01)\n------------------\n- Fix for endianness bug in WKB writer (#174).\n\n1.4.2 (2014-09-29)\n------------------\n- Fix bungled 1.4.1 release (#176).\n\n1.4.1 (2014-09-23)\n------------------\n- Return of support for GEOS 3.2 (#176, #178).\n\n1.4.0 (2014-09-08)\n------------------\n- SVG representations for IPython's inline image protocol.\n- Efficient and fast vectorized contains().\n- Change mitre_limit default to 5.0; raise ValueError with 0.0 (#139).\n- Allow mix of tuples and Points in sped-up LineString ctor (#152).\n- New STRtree class (#73).\n- Add ops.nearest_points() (#147).\n- Faster creation of geometric objects from others (cloning) (#165).\n- Removal of tests from package.\n\n1.3.3 (2014-07-23)\n------------------\n- Allow single-part geometries as argument to ops.cacaded_union() (#135).\n- Support affine transformations of LinearRings (#112).\n\n1.3.2 (2014-05-13)\n------------------\n- Let LineString() take a sequence of Points (#130).\n\n1.3.1 (2014-04-22)\n------------------\n- More reliable proxy cleanup on exit (#106).\n- More robust DLL loading on all platforms (#114).\n\n1.3.0 (2013-12-31)\n------------------\n- Include support for Python 3.2 and 3.3 (#56), minimum version is now 2.6.\n- Switch to GEOS WKT/WKB Reader/Writer API, with defaults changed to enable 3D\n  output dimensions, and to 'trim' WKT output for GEOS >=3.3.0.\n- Use GEOS version instead of GEOS C API version to determine library\n  capabilities (#65).\n\n1.2.19 (2013-12-30)\n-------------------\n- Add buffering style options (#55).\n\n1.2.18 (2013-07-23)\n--------------------\n- Add shapely.ops.transform.\n- Permit empty sequences in collection constructors (#49, #50).\n- Individual polygons in MultiPolygon.__geo_interface__ are changed to tuples\n  to match Polygon.__geo_interface__ (#51).\n- Add shapely.ops.polygonize_full (#57).\n\n1.2.17 (2013-01-27)\n-------------------\n- Avoid circular import between wkt/wkb and geometry.base by moving calls\n  to GEOS serializers to the latter module.\n- Set _ndim when unpickling (issue #6).\n- Don't install DLLs to Python's DLL directory (#37).\n- Add affinity module of affine transformation (#31).\n- Fix NameError that blocked installation with PyPy (#40, #41).\n\n1.2.16 (2012-09-18)\n-------------------\n- Add ops.unary_union function.\n- Alias ops.cascaded_union to ops.unary_union when GEOS CAPI >= (1,7,0).\n- Add geos_version_string attribute to shapely.geos.\n- Ensure parent is set when child geometry is accessed.\n- Generate _speedups.c using Cython when building from repo when missing,\n  stale, or the build target is \"sdist\".\n- The is_simple predicate of invalid, self-intersecting linear rings now\n  returns ``False``.\n- Remove VERSION.txt from repo, it's now written by the distutils setup script\n  with value of shapely.__version__.\n\n1.2.15 (2012-06-27)\n-------------------\n- Eliminate numerical sensitivity in a method chaining test (Debian bug\n  #663210).\n- Account for cascaded union of random buffered test points being a polygon\n  or multipolygon (Debian bug #666655).\n- Use Cython to build speedups if it is installed.\n- Avoid stumbling over SVN revision numbers in GEOS C API version strings.\n\n1.2.14 (2012-01-23)\n-------------------\n- A geometry's coords property is now sliceable, yielding a list of coordinate\n  values.\n- Homogeneous collections are now sliceable, yielding a new collection of the\n  same type.\n\n1.2.13 (2011-09-16)\n-------------------\n- Fixed errors in speedups on 32bit systems when GEOS references memory above\n  2GB.\n- Add shapely.__version__ attribute.\n- Update the manual.\n\n1.2.12 (2011-08-15)\n-------------------\n- Build Windows distributions with VC7 or VC9 as appropriate.\n- More verbose report on failure to speed up.\n- Fix for prepared geometries broken in 1.2.11.\n- DO NOT INSTALL 1.2.11\n\n1.2.11 (2011-08-04)\n-------------------\n- Ignore AttributeError during exit.\n- PyPy 1.5 support.\n- Prevent operation on prepared geometry crasher (#12).\n- Optional Cython speedups for Windows.\n- Linux 3 platform support.\n\n1.2.10 (2011-05-09)\n-------------------\n- Add optional Cython speedups.\n- Add is_cww predicate to LinearRing.\n- Add function that forces orientation of Polygons.\n- Disable build of speedups on Windows pending packaging work.\n\n1.2.9 (2011-03-31)\n------------------\n- Remove extra glob import.\n- Move examples to shapely.examples.\n- Add box() constructor for rectangular polygons.\n- Fix extraneous imports.\n\n1.2.8 (2011-12-03)\n------------------\n- New parallel_offset method (#6).\n- Support for Python 2.4.\n\n1.2.7 (2010-11-05)\n------------------\n- Support for Windows eggs.\n\n1.2.6 (2010-10-21)\n------------------\n- The geoms property of an empty collection yields [] instead of a ValueError\n  (#3).\n- The coords and geometry type sproperties have the same behavior as above.\n- Ensure that z values carry through into products of operations (#4).\n\n1.2.5 (2010-09-19)\n------------------\n- Stop distributing docs/_build.\n- Include library fallbacks in test_dlls.py for linux platform.\n\n1.2.4 (2010-09-09)\n------------------\n- Raise AttributeError when there's no backend support for a method.\n- Raise OSError if libgeos_c.so (or variants) can't be found and loaded.\n- Add geos_c DLL loading support for linux platforms where find_library doesn't\n  work.\n\n1.2.3 (2010-08-17)\n------------------\n- Add mapping function.\n- Fix problem with GEOSisValidReason symbol for GEOS < 3.1.\n\n1.2.2 (2010-07-23)\n------------------\n- Add representative_point method.\n\n1.2.1 (2010-06-23)\n------------------\n- Fixed bounds of singular polygons.\n- Added shapely.validation.explain_validity function (#226).\n\n1.2 (2010-05-27)\n----------------\n- Final release.\n\n1.2rc2 (2010-05-26)\n-------------------\n- Add examples and tests to MANIFEST.in.\n- Release candidate 2.\n\n1.2rc1 (2010-05-25)\n-------------------\n- Release candidate.\n\n1.2b7 (2010-04-22)\n------------------\n- Memory leak associated with new empty geometry state fixed.\n\n1.2b6 (2010-04-13)\n------------------\n- Broken GeometryCollection fixed.\n\n1.2b5 (2010-04-09)\n------------------\n- Objects can be constructed from others of the same type, thereby making\n  copies. Collections can be constructed from sequences of objects, also making\n  copies.\n- Collections are now iterators over their component objects.\n- New code for manual figures, using the descartes package.\n\n1.2b4 (2010-03-19)\n------------------\n- Adds support for the \"sunos5\" platform.\n\n1.2b3 (2010-02-28)\n------------------\n- Only provide simplification implementations for GEOS C API >= 1.5.\n\n1.2b2 (2010-02-19)\n------------------\n- Fix cascaded_union bug introduced in 1.2b1 (#212).\n\n1.2b1 (2010-02-18)\n------------------\n- Update the README. Remove cruft from setup.py. Add some version 1.2 metadata\n  regarding required Python version (>=2.5,<3) and external dependency\n  (libgeos_c >= 3.1).\n\n1.2a6 (2010-02-09)\n------------------\n- Add accessor for separate arrays of X and Y values (#210).\n\nTODO: fill gap here\n\n1.2a1 (2010-01-20)\n------------------\n- Proper prototyping of WKB writer, and avoidance of errors on 64-bit systems\n  (#191).\n- Prototype libgeos_c functions in a way that lets py2exe apps import shapely\n  (#189).\n\n1.2 Branched (2009-09-19)\n\n1.0.12 (2009-04-09)\n-------------------\n- Fix for references held by topology and predicate descriptors.\n\n1.0.11 (2008-11-20)\n-------------------\n- Work around bug in GEOS 2.2.3, GEOSCoordSeq_getOrdinate not exported properly\n  (#178).\n\n1.0.10 (2008-11-17)\n-------------------\n- Fixed compatibility with GEOS 2.2.3 that was broken in 1.0.8 release (#176).\n\n1.0.9 (2008-11-16)\n------------------\n- Find and load MacPorts libgeos.\n\n1.0.8 (2008-11-01)\n------------------\n- Fill out GEOS function result and argument types to prevent faults on a\n  64-bit arch.\n\n1.0.7 (2008-08-22)\n------------------\n- Polygon rings now have the same dimensions as parent (#168).\n- Eliminated reference cycles in polygons (#169).\n\n1.0.6 (2008-07-10)\n------------------\n- Fixed adaptation of multi polygon data.\n- Raise exceptions earlier from binary predicates.\n- Beginning distributing new windows DLLs (#166).\n\n1.0.5 (2008-05-20)\n------------------\n- Added access to GEOS polygonizer function.\n- Raise exception when insufficient coordinate tuples are passed to LinearRing\n  constructor (#164).\n\n1.0.4 (2008-05-01)\n------------------\n- Disentangle Python and topological equality (#163).\n- Add shape(), a factory that copies coordinates from a geo interface provider.\n  To be used instead of asShape() unless you really need to store coordinates\n  outside shapely for efficient use in other code.\n- Cache GEOS geometries in adapters (#163).\n\n1.0.3 (2008-04-09)\n------------------\n- Do not release GIL when calling GEOS functions (#158).\n- Prevent faults when chaining multiple GEOS operators (#159).\n\n1.0.2 (2008-02-26)\n------------------\n- Fix loss of dimensionality in polygon rings (#155).\n\n1.0.1 (2008-02-08)\n------------------\n- Allow chaining expressions involving coordinate sequences and geometry parts\n  (#151).\n- Protect against abnormal use of coordinate accessors (#152).\n- Coordinate sequences now implement the numpy array protocol (#153).\n\n1.0 (2008-01-18)\n----------------\n- Final release.\n\n1.0 RC2 (2008-01-16)\n--------------------\n- Added temporary solution for #149.\n\n1.0 RC1 (2008-01-14)\n--------------------\n- First release candidate",
      "release_date": "2020-08-20T23:31:42",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Sean Gillies",
          "email": "sean.gillies@gmail.com",
          "url": null
        },
        {
          "type": "person",
          "role": "maintainer",
          "name": "Sean Gillies",
          "email": "sean.gillies@gmail.com",
          "url": null
        }
      ],
      "keywords": [
        "geometry topology gis",
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: GIS"
      ],
      "homepage_url": "https://github.com/Toblerity/Shapely",
      "download_url": "https://files.pythonhosted.org/packages/42/f3/0e1bc2c4f15e05e30c6b99322b9ddaa2babb3f43bc7df2698efdc1553439/Shapely-1.7.1.tar.gz",
      "size": 383194,
      "sha1": null,
      "md5": "2bf7bc1199b3a88b13c12109cd3d2429",
      "sha256": "1641724c1055459a7e2b8bbe47ba25bdc89554582e62aec23cb3f3ca25f9b129",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "BSD",
        "classifiers": [
          "License :: OSI Approved :: BSD License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/shapely/1.7.1/json",
      "datasource_id": null,
      "purl": "pkg:pypi/shapely@1.7.1"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "simplekml",
      "version": "1.3.5",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "A Simple KML creator\nSimplekml is a python package which enables you to generate KML with as little effort as possible.\n\nAt the time of making this package nothing was available (at least I could not find anything) that could create KML files easily. You needed a lot of bloated code to even create a simple point. This is understandable because the KML standard is quite extensive, but what if you just work with the simple elements of KML like Document, Folder, Point, LineString and Polygon? This package supports those elements and everything documented in the KML Reference. With simplekml creating a KML file containing a point as simple as:\n\n```python\nimport simplekml\nkml = simplekml.Kml()\nkml.newpoint(name=\"Kirstenbosch\", coords=[(18.432314,-33.988862)])\nkml.save(\"botanicalgarden.kml\")\n```\n\nSee the [Homepage](http://readthedocs.org/projects/simplekml/) for usage, documentation and a reference.",
      "release_date": "2020-04-02T12:19:41",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "2011-2016 Kyle Lancaster | 2019 Patrick Eisoldt",
          "email": "patrick@eisoldt.com",
          "url": null
        }
      ],
      "keywords": [
        "Development Status :: 5 - Production/Stable",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: GIS",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "homepage_url": "http://readthedocs.org/projects/simplekml/",
      "download_url": "https://files.pythonhosted.org/packages/0e/b5/c7f53a6fdbc17427bfb61d14f73e0d8d9a2d33ba3856eb24613465633eca/simplekml-1.3.5-py3-none-any.whl",
      "size": 65753,
      "sha1": null,
      "md5": "e729ccb9cc78b99453c90a626573b971",
      "sha256": "d5a0eb13772a4c8f830476fc0d7ae3ded3484745a61e7d0979fc5ded39cc36e9",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "GNU Lesser General Public License v3+",
        "classifiers": [
          "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/simplekml/1.3.5/json",
      "datasource_id": null,
      "purl": "pkg:pypi/simplekml@1.3.5"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "simplekml",
      "version": "1.3.5",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "A Simple KML creator\nSimplekml is a python package which enables you to generate KML with as little effort as possible.\n\nAt the time of making this package nothing was available (at least I could not find anything) that could create KML files easily. You needed a lot of bloated code to even create a simple point. This is understandable because the KML standard is quite extensive, but what if you just work with the simple elements of KML like Document, Folder, Point, LineString and Polygon? This package supports those elements and everything documented in the KML Reference. With simplekml creating a KML file containing a point as simple as:\n\n```python\nimport simplekml\nkml = simplekml.Kml()\nkml.newpoint(name=\"Kirstenbosch\", coords=[(18.432314,-33.988862)])\nkml.save(\"botanicalgarden.kml\")\n```\n\nSee the [Homepage](http://readthedocs.org/projects/simplekml/) for usage, documentation and a reference.",
      "release_date": "2020-04-02T12:19:42",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "2011-2016 Kyle Lancaster | 2019 Patrick Eisoldt",
          "email": "patrick@eisoldt.com",
          "url": null
        }
      ],
      "keywords": [
        "Development Status :: 5 - Production/Stable",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Topic :: Scientific/Engineering :: GIS",
        "Topic :: Software Development :: Libraries :: Python Modules"
      ],
      "homepage_url": "http://readthedocs.org/projects/simplekml/",
      "download_url": "https://files.pythonhosted.org/packages/62/de/a75c0c8341a2edd186e14648c231c92c9e672dd38c544089615140c28ac6/simplekml-1.3.5.tar.gz",
      "size": 39069,
      "sha1": null,
      "md5": "23f9cf9efa5e08981b7b004ce0ce5cb3",
      "sha256": "657b4e20177299a4e80bacfafff1f91102010bc23dc0ce7a7ae43bdd4246049e",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "GNU Lesser General Public License v3+",
        "classifiers": [
          "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/simplekml/1.3.5/json",
      "datasource_id": null,
      "purl": "pkg:pypi/simplekml@1.3.5"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "six",
      "version": "1.16.0",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "Python 2 and 3 compatibility utilities\n.. image:: https://img.shields.io/pypi/v/six.svg\n   :target: https://pypi.org/project/six/\n   :alt: six on PyPI\n\n.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master\n   :target: https://travis-ci.org/benjaminp/six\n   :alt: six on TravisCI\n\n.. image:: https://readthedocs.org/projects/six/badge/?version=latest\n   :target: https://six.readthedocs.io/\n   :alt: six's documentation on Read the Docs\n\n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/benjaminp/six/blob/master/LICENSE\n   :alt: MIT License badge\n\nSix is a Python 2 and 3 compatibility library.  It provides utility functions\nfor smoothing over the differences between the Python versions with the goal of\nwriting Python code that is compatible on both Python versions.  See the\ndocumentation for more information on what is provided.\n\nSix supports Python 2.7 and 3.3+.  It is contained in only one Python\nfile, so it can be easily copied into your project. (The copyright and license\nnotice must be retained.)\n\nOnline documentation is at https://six.readthedocs.io/.\n\nBugs can be reported to https://github.com/benjaminp/six.  The code can also\nbe found there.",
      "release_date": "2021-05-05T14:18:17",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Benjamin Peterson",
          "email": "benjamin@python.org",
          "url": null
        }
      ],
      "keywords": [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 3",
        "Topic :: Software Development :: Libraries",
        "Topic :: Utilities"
      ],
      "homepage_url": "https://github.com/benjaminp/six",
      "download_url": "https://files.pythonhosted.org/packages/d9/5a/e7c31adbe875f2abbb91bd84cf2dc52d792b5a01506781dbcf25c91daf11/six-1.16.0-py2.py3-none-any.whl",
      "size": 11053,
      "sha1": null,
      "md5": "529d7fd7e14612ccde86417b4402d6f3",
      "sha256": "8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "MIT",
        "classifiers": [
          "License :: OSI Approved :: MIT License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/six/1.16.0/json",
      "datasource_id": null,
      "purl": "pkg:pypi/six@1.16.0"
    },
    {
      "type": "pypi",
      "namespace": null,
      "name": "six",
      "version": "1.16.0",
      "qualifiers": {},
      "subpath": null,
      "primary_language": "Python",
      "description": "Python 2 and 3 compatibility utilities\n.. image:: https://img.shields.io/pypi/v/six.svg\n   :target: https://pypi.org/project/six/\n   :alt: six on PyPI\n\n.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master\n   :target: https://travis-ci.org/benjaminp/six\n   :alt: six on TravisCI\n\n.. image:: https://readthedocs.org/projects/six/badge/?version=latest\n   :target: https://six.readthedocs.io/\n   :alt: six's documentation on Read the Docs\n\n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/benjaminp/six/blob/master/LICENSE\n   :alt: MIT License badge\n\nSix is a Python 2 and 3 compatibility library.  It provides utility functions\nfor smoothing over the differences between the Python versions with the goal of\nwriting Python code that is compatible on both Python versions.  See the\ndocumentation for more information on what is provided.\n\nSix supports Python 2.7 and 3.3+.  It is contained in only one Python\nfile, so it can be easily copied into your project. (The copyright and license\nnotice must be retained.)\n\nOnline documentation is at https://six.readthedocs.io/.\n\nBugs can be reported to https://github.com/benjaminp/six.  The code can also\nbe found there.",
      "release_date": "2021-05-05T14:18:18",
      "parties": [
        {
          "type": "person",
          "role": "author",
          "name": "Benjamin Peterson",
          "email": "benjamin@python.org",
          "url": null
        }
      ],
      "keywords": [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 3",
        "Topic :: Software Development :: Libraries",
        "Topic :: Utilities"
      ],
      "homepage_url": "https://github.com/benjaminp/six",
      "download_url": "https://files.pythonhosted.org/packages/71/39/171f1c67cd00715f190ba0b100d606d440a28c93c7714febeca8b79af85e/six-1.16.0.tar.gz",
      "size": 34041,
      "sha1": null,
      "md5": "a7c927740e4964dd29b72cebfc1429bb",
      "sha256": "1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926",
      "sha512": null,
      "bug_tracking_url": null,
      "code_view_url": null,
      "vcs_url": null,
      "copyright": null,
      "license_expression": null,
      "declared_license": {
        "license": "MIT",
        "classifiers": [
          "License :: OSI Approved :: MIT License"
        ]
      },
      "notice_text": null,
      "source_packages": [],
      "file_references": [],
      "extra_data": {},
      "dependencies": [],
      "repository_homepage_url": null,
      "repository_download_url": null,
      "api_data_url": "https://pypi.org/pypi/six/1.16.0/json",
      "datasource_id": null,
      "purl": "pkg:pypi/six@1.16.0"
    }
  ],
  "resolution": [
    {
      "package": "pkg:pypi/pyyaml@6.0",
      "dependencies": []
    },
    {
      "package": "pkg:pypi/retrying@1.3.3",
      "dependencies": [
        "pkg:pypi/six@1.16.0"
      ]
    },
    {
      "package": "pkg:pypi/shapely@1.7.1",
      "dependencies": []
    },
    {
      "package": "pkg:pypi/simplekml@1.3.5",
      "dependencies": []
    },
    {
      "package": "pkg:pypi/six@1.16.0",
      "dependencies": []
    }
  ]
}